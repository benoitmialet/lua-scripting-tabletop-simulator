{
  "SaveName": "cours_tts",
  "EpochTime": 1666513584,
  "Date": "10/23/2022 10:26:24 AM",
  "VersionNumber": "v13.2.2",
  "GameMode": "--",
  "GameType": "",
  "GameComplexity": "",
  "PlayingTime": [
    0,
    0
  ],
  "PlayerCounts": [
    0,
    0
  ],
  "Tags": [],
  "Gravity": 1.0,
  "PlayArea": 0.6000003,
  "Table": "Table_Custom",
  "TableURL": "http://cloud-3.steamusercontent.com/ugc/929303176024812025/1CE2F3281C910B3E836B1B9ECD2814A5AD699835/",
  "Sky": "Sky_Museum",
  "Note": "",
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "MusicPlayer": {
    "RepeatSong": false,
    "PlaylistEntry": 0,
    "CurrentAudioTitle": "Shadowmoon",
    "CurrentAudioURL": "http://cloud-3.steamusercontent.com/ugc/770601828587055146/B4D229E4C683BC5A6F9712F52DC9DAAE28B0C6AC/",
    "AudioLibrary": [
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/770601828587055146/B4D229E4C683BC5A6F9712F52DC9DAAE28B0C6AC/",
        "Item2": "Shadowmoon"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/770601828587132232/7D08630C6F43CB4BDEE63D6EB301443342DFF8EB/",
        "Item2": "Heart of the Deep"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/770601828587290498/CAA33176F269F822862C36B8FC83F925B2F0A840/",
        "Item2": "Relentless"
      }
    ]
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": true,
    "xSize": 1.0,
    "ySize": 1.0,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.7160008,
    "LightColor": {
      "r": 0.945993066,
      "g": 0.909205735,
      "b": 0.7399841
    },
    "AmbientIntensity": 1.33199513,
    "AmbientType": 1,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0,
    "LutURL": ""
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": true,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": [
      {
        "displayed": "figure",
        "normalized": "figure"
      },
      {
        "displayed": "valet",
        "normalized": "valet"
      },
      {
        "displayed": "reine",
        "normalized": "reine"
      },
      {
        "displayed": "roi",
        "normalized": "roi"
      },
      {
        "displayed": "chiffre",
        "normalized": "chiffre"
      },
      {
        "displayed": "sept",
        "normalized": "sept"
      },
      {
        "displayed": "dix",
        "normalized": "dix"
      },
      {
        "displayed": "neuf",
        "normalized": "neuf"
      },
      {
        "displayed": "huit",
        "normalized": "huit"
      },
      {
        "displayed": "six",
        "normalized": "six"
      },
      {
        "displayed": "cinq",
        "normalized": "cinq"
      },
      {
        "displayed": "quatre",
        "normalized": "quatre"
      },
      {
        "displayed": "as",
        "normalized": "as"
      },
      {
        "displayed": "trois",
        "normalized": "trois"
      },
      {
        "displayed": "deux",
        "normalized": "deux"
      },
      {
        "displayed": "monnaie",
        "normalized": "monnaie"
      }
    ]
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "CameraStates": [
    null,
    {
      "Position": {
        "x": 0.0,
        "y": -2.5,
        "z": 0.0
      },
      "Rotation": {
        "x": 64.99999,
        "y": 0.0,
        "z": 0.0
      },
      "Distance": 77.07558,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": -1.29979749E-10,
        "y": 67.3541641,
        "z": -32.57354
      }
    },
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  "DecalPallet": [],
  "LuaScript": "----------------------------------------------------------------------------------------------------\n-- SCRIPTER POUR TABLETOP SIMULATOR\n-- COPIEZ VOTRE CODE ICI\n---------------------------------------------",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "ObjectStates": [
    {
      "GUID": "a01f44",
      "Name": "Digital_Clock",
      "Transform": {
        "posX": 6.38723941E-05,
        "posY": 0.9612174,
        "posZ": 30.8847961,
        "rotX": -2.22891913E-06,
        "rotY": 359.9823,
        "rotZ": 1.3876155E-07,
        "scaleX": 1.5,
        "scaleY": 1.5,
        "scaleZ": 1.5
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.409406066,
        "g": 0.119111784,
        "b": 0.119111784
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Clock": {
        "Mode": 0,
        "SecondsPassed": 0,
        "Paused": false
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "e3e283",
      "Name": "Bag",
      "Transform": {
        "posX": -0.99999994,
        "posY": 0.774965942,
        "posZ": 19.9999981,
        "rotX": -1.85095629E-07,
        "rotY": -3.878E-05,
        "rotZ": -5.00257954E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Objets",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Bag": {
        "Order": 0
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "729062",
          "Name": "reversi_chip",
          "Transform": {
            "posX": -18.5000038,
            "posY": 3.17542267,
            "posZ": 14.5001431,
            "rotX": 0.0922571,
            "rotY": -0.000151666391,
            "rotZ": 0.000631792645,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.757352948,
            "g": 0.757352948,
            "b": 0.757352948
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "a14035",
          "Name": "reversi_chip",
          "Transform": {
            "posX": -16.0,
            "posY": 3.151075,
            "posZ": 14.0,
            "rotX": 3.498662E-07,
            "rotY": -0.000157826551,
            "rotZ": -8.882871E-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "check",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.757352948,
            "g": 0.757352948,
            "b": 0.757352948
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "8b1f03",
          "Name": "reversi_chip",
          "Transform": {
            "posX": -15.5,
            "posY": 3.151075,
            "posZ": 16.5,
            "rotX": 1.05733422E-08,
            "rotY": -0.000157879651,
            "rotZ": 2.15829957E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.757352948,
            "g": 0.757352948,
            "b": 0.757352948
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "8fe20c",
          "Name": "reversi_chip",
          "Transform": {
            "posX": -18.0,
            "posY": 3.151075,
            "posZ": 12.0,
            "rotX": -2.961266E-07,
            "rotY": -0.000157879869,
            "rotZ": -2.5419E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.757352948,
            "g": 0.757352948,
            "b": 0.757352948
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "dfe347",
          "Name": "Card",
          "Transform": {
            "posX": -10.500001,
            "posY": 2.01968455,
            "posZ": 15.500001,
            "rotX": 0.005444338,
            "rotY": 179.999924,
            "rotZ": 180.007568,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 14,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "f11713",
          "Name": "Card",
          "Transform": {
            "posX": -8.499999,
            "posY": 2.03331828,
            "posZ": 12.499999,
            "rotX": 0.5141723,
            "rotY": 179.9985,
            "rotZ": 180.006943,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 14,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "049a9a",
          "Name": "Card",
          "Transform": {
            "posX": -6.5,
            "posY": 3.0288372,
            "posZ": 16.5,
            "rotX": 7.45060049E-08,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 14,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "3327f3",
          "Name": "Card",
          "Transform": {
            "posX": -10.0,
            "posY": 3.0288372,
            "posZ": 20.0,
            "rotX": 6.49284644E-08,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 14,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "87ba2b",
          "Name": "Die_6_Rounded",
          "Transform": {
            "posX": -19.00036,
            "posY": 3.36116123,
            "posZ": 15.000391,
            "rotX": 0.4431634,
            "rotY": -0.005542755,
            "rotZ": 0.450404346,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.0552372038,
            "g": 0.7794118,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": 2,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "1",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Value": "2",
              "Rotation": {
                "x": 90.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Value": "3",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 90.0
              }
            },
            {
              "Value": "4",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": -90.0
              }
            },
            {
              "Value": "5",
              "Rotation": {
                "x": -90.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Value": "6",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": -180.0
              }
            }
          ]
        },
        {
          "GUID": "9bad38",
          "Name": "Die_6",
          "Transform": {
            "posX": -18.0,
            "posY": 3.336521,
            "posZ": 17.0,
            "rotX": 270.0,
            "rotY": 3.65196E-05,
            "rotZ": 0.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": 0,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "1",
              "Rotation": {
                "x": -90.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Value": "2",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Value": "3",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": -90.0
              }
            },
            {
              "Value": "4",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 90.0
              }
            },
            {
              "Value": "5",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": -180.0
              }
            },
            {
              "Value": "6",
              "Rotation": {
                "x": 90.0,
                "y": 0.0,
                "z": 0.0
              }
            }
          ]
        }
      ]
    },
    {
      "GUID": "200cdb",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": 4.5,
        "posY": 0.943000138,
        "posZ": 20.5,
        "rotX": -4.12886237E-07,
        "rotY": -4.41204E-08,
        "rotZ": 5.896352E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "monnaie1",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "d852b0",
          "Name": "reversi_chip",
          "Transform": {
            "posX": 4.499987,
            "posY": 3.09384942,
            "posZ": 19.4983978,
            "rotX": 357.585236,
            "rotY": -0.0007537223,
            "rotZ": -0.003071742,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "monnaie1",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.757352948,
            "g": 0.757352948,
            "b": 0.757352948
          },
          "Tags": [
            "monnaie"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "57d144",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -31.5,
        "posY": 1.01121807,
        "posZ": 31.4999981,
        "rotX": 1.00699635E-05,
        "rotY": 180.035431,
        "rotZ": -2.41450584E-06,
        "scaleX": 0.4,
        "scaleY": 1.0,
        "scaleZ": 0.4
      },
      "Nickname": "Position Finder",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://i.imgur.com/WLjyIPz.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 14.77778,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "function onload()\r\n    self.createButton({ -- 0\r\n        click_function  = \"record_local\",\r\n        function_owner  = self,\r\n        label           = \"Local\",\r\n        width           = 1100,\r\n        height          = 500,\r\n        font_size       = 350,\r\n        position        = {-2.4, 0.15, -0.6},\r\n    })\r\n    self.createButton({ -- 1\r\n        click_function  = \"record_global\",\r\n        function_owner  = self,\r\n        label           = \"Global\",\r\n        width           = 1100,\r\n        height          = 500,\r\n        font_size       = 350,\r\n        position        = {-2.4, 0.15, 0.6},\r\n    })\r\n    self.createButton({ -- 2\r\n        click_function  = \"clear\",\r\n        function_owner  = self,\r\n        label           = \"Clear\",\r\n        width           = 900,\r\n        height          = 500,\r\n        font_size       = 350,\r\n        position        = {2.2, 0.15, -0.6},\r\n    })\r\n    self.createButton({ -- 3\r\n        click_function  = \"undo\",\r\n        function_owner  = self,\r\n        label           = \"Undo\",\r\n        width           = 900,\r\n        height          = 500,\r\n        font_size       = 350,\r\n        position        = {2.2, 0.15, 0.6},\r\n    })\r\nend\r\n\r\nfunction clear()\r\n    Notes.setNotes(\"\")\r\n    x_ref=nil\r\nend\r\n\r\nfunction undo()\r\n    local list = Notes.getNotes()\r\n    local character = nil\r\n    local i=-1\r\n    while character ~='{' and -i<=#list do\r\n        character = string.sub(list, i, i)\r\n        i=i-1\r\n    end\r\n    list = string.sub(list,1,i)\r\n    Notes.setNotes(list)\r\nend\r\n\r\nfunction record_global()\r\n    x_ref = 0\r\n    y_ref = 0\r\n    z_ref = 0\r\n    local toPrint = \"List of global positions:\\n\"\r\n    local list = Notes.getNotes()\r\n    list = list..\"\\n\"..toPrint\r\n    Notes.setNotes(list)\r\n\r\nend\r\n\r\nfunction record_local()\r\n    Wait.time(function()\r\n        DropPosition = self.getPosition()\r\n        local heightOffset = self.getDescription()\r\n        x_ref = math.floor(DropPosition.x*100+0.5) / 100\r\n        y_ref = math.floor(DropPosition.y*100+0.5) / 100\r\n        z_ref = math.floor(DropPosition.z*100+0.5) / 100\r\n        if heightOffset ~= \"\" then\r\n            y = y + tonumber(heightOffset)\r\n        end\r\n        local toPrint = \"Local Reference : {\"..x_ref..\", \"..y_ref..\", \"..z_ref..\"}\\n\\nList of local positions:\\n\"\r\n        local list = Notes.getNotes()\r\n        list = list..\"\\n\"..toPrint\r\n        Notes.setNotes(list)\r\n    end, 0.5, 1)\r\nend\r\n\r\nfunction onDrop()\r\n    if x_ref then\r\n        Wait.time(function()\r\n            DropPosition = self.getPosition()\r\n            local heightOffset = self.getDescription()\r\n            local x = math.floor((DropPosition.x - x_ref)*100+0.5) / 100\r\n            local y = math.floor((DropPosition.y - y_ref)*100+0.5) / 100\r\n            local z = math.floor((DropPosition.z - z_ref)*100+0.5) / 100\r\n            if heightOffset ~= \"\" then\r\n                y = y + tonumber(heightOffset)\r\n            end\r\n            local toPrint = \"{\"..x..\", \"..y..\", \"..z..\"},\"\r\n            local list = Notes.getNotes()\r\n            list = list..\"\"..toPrint\r\n            Notes.setNotes(list)\r\n    end, 0.5, 1)\r\n    end\r\nend",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "ff707c",
      "Name": "Custom_Model",
      "Transform": {
        "posX": 37.0000038,
        "posY": 1.130952,
        "posZ": 32.0,
        "rotX": -1.75941992E-07,
        "rotY": 179.994659,
        "rotZ": -1.32209391E-06,
        "scaleX": 1.25890076,
        "scaleY": 1.2480489,
        "scaleZ": 1.2480489
      },
      "Nickname": "Button Visualizer",
      "Description": "by GiantDwarf01",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "http://cloud-3.steamusercontent.com/ugc/862858215778203752/983B188465741B94503F490ADBD5B45D5713CF08/",
        "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/847088265645289992/31E60514D9D9BE22E94586B5FDF6CF4973AFF337/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "CustomShader": {
          "SpecularColor": {
            "r": 0.0,
            "g": 0.0,
            "b": 0.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "dev = false\r\n\r\nlocal editingObject = nil\r\n\r\nlocal savedButtons = {}\r\nlocal buttonIndex = {}\r\nlocal inputIndex = {}\r\nlocal currentEdit = 0\r\nlocal totalButtons = 0\r\nlocal default_values = {\r\n  type = \"Button\",\r\n  input_function = \"nilFunction\",\r\n  click_function = \"nilFunction\",\r\n  function_owner = self,\r\n  label = \"Ipso Facto\",\r\n  position = {0,0,0},\r\n  rotation = {0,0,0},\r\n  scale = {0.5,0.5,0.5},\r\n  width = 2000,\r\n  height = 400,\r\n  font_size = 400,\r\n  color = {1,1,1,1},\r\n  font_color = {0,0,0,1},\r\n  tooltip = \"\",\r\n  alignment = 1,\r\n  value = \"\",\r\n  validation = 1\r\n}\r\nlocal increment_value = {\r\n  position = 0.1, rotation = 10, scale = 0.1, dimension = 100\r\n}\r\n\r\nfunction onLoad(save_state)\r\n  local button = {click_function = 'devFunction', function_owner = self,\r\n  label = 'Ipso Facto', position = {x = 0, y = 1, z = 4},\r\n  scale = {x = 0.5, y = 1, z = 0.5}, width = 2000, height = 400, font_size = 400}\r\n  self.createButton(button)\r\n\r\n  button = {click_function = 'devFunction2', function_owner = self,\r\n  label = 'Ipso Facto', position = {x = 0, y = 1, z = 5},\r\n  scale = {x = 0.5, y = 1, z = 0.5}, width = 2000, height = 400, font_size = 400}\r\n  self.createButton(button)\r\n\r\n  mainMenu()\r\nend\r\n\r\nfunction newButton()\r\n  totalButtons = totalButtons + 1\r\n  currentEdit = totalButtons\r\n  savedButtons[currentEdit] = table.clone(default_values)\r\n  savedButtons[currentEdit].index = currentEdit - 1\r\nend\r\nfunction onCollisionEnter(collision_info)\r\n  -- collision_info table:\r\n  --   collision_object    Object\r\n  --   contact_points      Table     {Vector, ...}\r\n  --   relative_velocity   Vector\r\n  if collision_info.collision_object == nil\r\n  or collision_info.collision_object == self\r\n  or collision_info.collision_object.getGUID() == nil\r\n  or collision_info.collision_object.tag == \"Surface\"\r\n  or objectLoaded\r\n  then\r\n    return\r\n  end\r\n  local objGuid = collision_info.collision_object.getGUID()\r\n  editInput(\"guid_input\", {value = objGuid})\r\n  GUIDInput(objGuid)\r\nend\r\nfunction copyExistingValues(v)\r\n\r\n  if v.label ~= nil then\r\n    savedButtons[currentEdit].label = v.label\r\n  else\r\n    savedButtons[currentEdit].label = \" \"\r\n  end\r\n\r\n  if v.click_function ~= nil then\r\n    savedButtons[currentEdit].click_function = v.click_function\r\n  end\r\n  if v.input_function ~= nil then\r\n    savedButtons[currentEdit].input_function = v.input_function\r\n  end\r\n\r\n  savedButtons[currentEdit].position[1] = v.position[1]\r\n  savedButtons[currentEdit].position[2] = v.position[2]\r\n  savedButtons[currentEdit].position[3] = v.position[3]\r\n\r\n  savedButtons[currentEdit].rotation[1] = v.rotation[1]\r\n  savedButtons[currentEdit].rotation[2] = v.rotation[2]\r\n  savedButtons[currentEdit].rotation[3] = v.rotation[3]\r\n\r\n  savedButtons[currentEdit].scale[1] = v.scale[1]\r\n  savedButtons[currentEdit].scale[2] = v.scale[2]\r\n  savedButtons[currentEdit].scale[3] = v.scale[3]\r\n\r\n  savedButtons[currentEdit].width = v.width\r\n  savedButtons[currentEdit].height = v.height\r\n  savedButtons[currentEdit].font_size = v.font_size\r\n\r\n  savedButtons[currentEdit].color = v.color\r\n\r\n  savedButtons[currentEdit].font_color = v.font_color\r\n\r\n  savedButtons[currentEdit].tooltip = v.tooltip\r\n  savedButtons[currentEdit].alignment = v.alignment\r\n  if v.validation ~= nil then\r\n    savedButtons[currentEdit].validation = v.validation\r\n  end\r\n  if v.value ~= nil then\r\n    savedButtons[currentEdit].value = v.value\r\n  end\r\nend\r\nfunction loadObject()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  editingObject.highlightOn({1,1,0})\r\n  local buttons = editingObject.getButtons()\r\n  if buttons ~= nil then\r\n    for k,v in pairs(buttons) do\r\n      newButton()\r\n      copyExistingValues(v)\r\n    end\r\n  end\r\n\r\n  local inputs = editingObject.getInputs()\r\n  if inputs ~= nil then\r\n    for k,v in pairs(inputs) do\r\n      newButton()\r\n      copyExistingValues(v)\r\n    end\r\n  end\r\n\r\n  if currentEdit == 0 then\r\n    newButton()\r\n  end\r\n\r\n  createLabelButtons({-6.5,0.15,-2.5})\r\n\r\n  buttonSelection({-6.5,0.15,2.25})\r\n\r\n  createPositionButtons({-5.5,0.15,-0.5})\r\n  createRotationButtons({-5.5+4,0.15,-0.5})\r\n  createScaleButtons({-5.5+8,0.15,-0.5})\r\n\r\n  createDimensionButtons({-3.5,0.15,1})\r\n\r\n  createColorButton({0.5,0.15,1})\r\n  createFontColorButton({3.5,0.15,1})\r\n\r\n  exitButton({7.3,0.15,-2.5})\r\n\r\n  updateValues()\r\n\r\n  updateObject()\r\n  objectLoaded = true\r\nend\r\nfunction updateObject()\r\n  editingObject.clearButtons()\r\n  editingObject.clearInputs()\r\n\r\n  for k,v in pairs(savedButtons) do\r\n    if v.type == \"Button\" then\r\n      editingObject.createButton(v)\r\n    else\r\n      editingObject.createInput(v)\r\n    end\r\n  end\r\nend\r\n\r\nfunction exitButton(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"exit_label\", \"X\", {pos.x,pos.y,pos.z}, {font_color = {1,0,0}})\r\n\r\n  createButton(\"exit_button\", \"X\", {pos.x,pos.y,pos.z}, {color = {0,0,0,0}, width=400, height=400, tooltip=\"Exit and Clear Object\", click_function = dynamicFunction(\"exitClick\", function()\r\n    exit()\r\n  end)})\r\nend\r\nfunction mainMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  createButton(\"name_label\", \"Button Visualizer\", {0,0.15,-1.2}, {font_size = 1000, scale = {1,1,1}})\r\n  createButton(\"author_label\", \"By GiantDwarf01\", {0,0.15,0}, {scale = {1,1,1}})\r\n\r\n  createInput(\"guid_input\", \"GUID\", {0,0.15,2}, {input_function = dynamicFunction(\"setGUID\", function(obj, player, input_value, sel)\r\n    GUIDInput(input_value)\r\n  end), width = 2000})\r\nend\r\n\r\nfunction GUIDInput(guid)\r\n  if string.sub(guid,-string.len('\\n')) == '\\n' then\r\n    local trueGUID = string.sub(guid,0,6)\r\n    if getObjectFromGUID(trueGUID) ~= nil and getObjectFromGUID(trueGUID) ~= self then\r\n      setObject(trueGUID)\r\n      return\r\n    end\r\n  end\r\n  if getObjectFromGUID(guid) == nil or getObjectFromGUID(guid) == self then\r\n    createButton(\"load_label\", \"Edit Object\", {0,0.15,2.5}, {scale = {0,0,0}})\r\n  else\r\n    createButton(\"load_label\", \"Edit Object\", {0,0.15,2.5}, {font_color = {0,0,0,1}, scale = {0.5,0.5,0.5}, width = 2000, height = 400, click_function = dynamicFunction(\"setObjectGUID\", function()\r\n      setObject(guid)\r\n    end)})\r\n  end\r\nend\r\n\r\nfunction setObject(guid)\r\n  if getObjectFromGUID(guid) == nil then\r\n    return\r\n  end\r\n\r\n  editingObject = getObjectFromGUID(guid)\r\n  loadObject()\r\nend\r\n\r\nfunction exit()\r\n  if editingObject ~= nil then\r\n    editingObject.clearButtons()\r\n    editingObject.clearInputs()\r\n    editingObject.highlightOff()\r\n  end\r\n  editingObject = nil\r\n  savedButtons = {}\r\n  buttonIndex = {}\r\n  inputIndex = {}\r\n  currentEdit = 0\r\n  totalButtons = 0\r\n  if colorItem ~= nil then\r\n    colorItem.destruct()\r\n    colorItem = nil\r\n  end\r\n  if colorFontItem ~= nil then\r\n    colorFontItem.destruct()\r\n    colorFontItem = nil\r\n  end\r\n  objectLoaded = false\r\n  mainMenu()\r\nend\r\n\r\nfunction updateValues()\r\n  local curButton = savedButtons[currentEdit]\r\n  if curButton.label ~= getInputValue('input_label') then\r\n    local fixedString = string.gsub(curButton.label, \"(\\n)\", \" \")\r\n    if string.len(fixedString) > 34 then\r\n      fixedString = string.sub(fixedString, 0, 31) .. \"...\"\r\n    end\r\n    editInput(\"input_label\", {label = fixedString, value = fixedString, position = {-2.5,0.15,-2.5}, height = 380})\r\n  end\r\n  if curButton.tooltip ~= getInputValue('tooltip_input') then\r\n    editInput('tooltip_input',{value = curButton.tooltip})\r\n  end\r\n\r\n  if curButton.position[1] ~= tonumber(getInputValue('position_x_input')) then\r\n    editInput('position_x_input',{value = curButton.position[1]})\r\n  end\r\n  if curButton.position[2] ~= tonumber(getInputValue('position_y_input')) then\r\n    editInput('position_y_input',{value = curButton.position[2]})\r\n  end\r\n  if curButton.position[3] ~= tonumber(getInputValue('position_z_input')) then\r\n    editInput('position_z_input',{value = curButton.position[3]})\r\n  end\r\n\r\n\r\n  if curButton.rotation[1] ~= tonumber(getInputValue('rotation_x_input')) then\r\n    editInput('rotation_x_input',{value = curButton.rotation[1]})\r\n  end\r\n  if curButton.rotation[2] ~= tonumber(getInputValue('rotation_y_input')) then\r\n    editInput('rotation_y_input',{value = curButton.rotation[2]})\r\n  end\r\n  if curButton.rotation[3] ~= tonumber(getInputValue('rotation_z_input')) then\r\n    editInput('rotation_z_input',{value = curButton.rotation[3]})\r\n  end\r\n\r\n\r\n  if curButton.scale[1] ~= tonumber(getInputValue('scale_x_input')) then\r\n    editInput('scale_x_input',{value = curButton.scale[1]})\r\n  end\r\n  if curButton.scale[2] ~= tonumber(getInputValue('scale_y_input')) then\r\n    editInput('scale_y_input',{value = curButton.scale[2]})\r\n  end\r\n  if curButton.scale[3] ~= tonumber(getInputValue('scale_z_input')) then\r\n    editInput('scale_z_input',{value = curButton.scale[3]})\r\n  end\r\n\r\n  if curButton.width ~= tonumber(getInputValue('dimension_x_input')) then\r\n    editInput('dimension_x_input',{value = curButton.width})\r\n  end\r\n  if curButton.height ~= tonumber(getInputValue('dimension_y_input')) then\r\n    editInput('dimension_y_input',{value = curButton.height})\r\n  end\r\n  if curButton.font_size ~= tonumber(getInputValue('dimension_z_input')) then\r\n    editInput('dimension_z_input',{value = curButton.font_size})\r\n  end\r\n\r\n  selectValidation(curButton.validation)\r\n  selectAlignment(curButton.alignment)\r\n  toggleType(curButton.type)\r\n\r\n  local fixedString = string.gsub(savedButtons[currentEdit].label, \"(\\n)\", \" \")\r\n  if string.len(fixedString) > 22 then\r\n    fixedString = string.sub(fixedString, 0, 19) .. \"...\"\r\n  end\r\n  editButton(\"select_button\", {label = currentEdit ..' - '.. fixedString})\r\n  updateObject()\r\nend\r\n\r\nlocal dropPos = nil\r\nfunction buttonSelection(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  dropPos = pos\r\n\r\n  createButton(\"select_label\", \"Editing:\", {pos.x,pos.y,pos.z})\r\n  createButton(\"select_button\",currentEdit ..' - '..savedButtons[currentEdit].label, {pos.x+3.5,pos.y,pos.z}, {font_color={0,0,0},width=5000, height=400, click_function=dynamicFunction(\"showButton\", function()\r\n    showButtonSelect()\r\n  end)})\r\n\r\n  createButton(\"add_new_button\",\"+\", {pos.x+6.5,pos.y,pos.z}, {tooltip=\"Add New\", font_color={0,0,0},width=400, height=400, click_function=dynamicFunction(\"addButton\", function()\r\n    if selectionShown then\r\n      hideButtonSelect()\r\n    end\r\n    newButton()\r\n    updateValues()\r\n  end)})\r\n  createButton(\"remove_button\",\"Reset\", {pos.x+7.4,pos.y,pos.z}, {tooltip = \"Reset Current Values\", font_color={0,0,0},width=1000, height=400, click_function=dynamicFunction(\"deleteButton\", function()\r\n    savedButtons[currentEdit] = table.clone(default_values)\r\n    savedButtons[currentEdit].index = currentEdit - 1\r\n    updateValues()\r\n  end)})\r\n\r\n  createButton(\"export_button\",\"Export Data\", {pos.x+12.5,pos.y,pos.z+0.2}, {tooltip=\"Export Current Data\", font_color={0,0,0},width=2500, height=400, click_function=dynamicFunction(\"exportButton\", function()\r\n    local pos = self.getPosition()\r\n    pos.x = pos.x+15\r\n    exportData(pos,currentEdit)\r\n  end)})\r\n  createButton(\"export_all_button\",\"Export All\", {pos.x+12.5,pos.y,pos.z-0.2}, {tooltip=\"Export All Data\", font_color={0,0,0},width=2500, height=400, click_function=dynamicFunction(\"exportAllButton\", function()\r\n    local pos = self.getPosition()\r\n    pos.x = pos.x+15\r\n    local center = pos.z\r\n    for k,v in pairs(savedButtons) do\r\n      pos.z = center - (k - math.ceil(totalButtons/2))\r\n      pos.y = pos.y + 0.15\r\n      exportData(pos, k)\r\n    end\r\n  end)})\r\n\r\n  createButton(\"copy_button\",\"Copy Data\", {pos.x+9.5,pos.y,pos.z+0.2}, {font_color={0,0,0},width=2500, height=400, click_function=dynamicFunction(\"copyButton\", function()\r\n    copyData()\r\n  end)})\r\n  createButton(\"paste_button\",\"Paste Data\", {pos.x+9.5,pos.y,pos.z-0.2}, {font_color={0,0,0},width=2500, height=400, click_function=dynamicFunction(\"pasteButton\", function()\r\n    pasteData()\r\n  end)})\r\n\r\n  clipboard = table.clone(default_values)\r\nend\r\n\r\nlocal clipboard = {}\r\nfunction copyData()\r\n clipboard = table.clone(savedButtons[currentEdit])\r\n printToAll(\"Saved to clipboard\", {1,1,0})\r\nend\r\nfunction pasteData()\r\n  savedButtons[currentEdit] = table.clone(clipboard)\r\n  printToAll(\"Pasted from clipboard\", {1,1,0})\r\n  updateValues()\r\nend\r\n\r\nlocal default_data = {\r\n  width=100,\r\n  height=100,\r\n  font_size=100,\r\n  position={0,0,0},\r\n  rotation={0,0,0},\r\n  scale={1,1,1},\r\n  color={1,1,1,1},\r\n  font_color={0,0,0,1},\r\n  tooltip=\"\",\r\n  alignment=1,\r\n  value=\"\",\r\n  validation=1\r\n}\r\nfunction exportData(pos,card)\r\n  local data = savedButtons[card]\r\n  local note = spawnObject({type = 'Notecard'})\r\n  note.setPosition(pos)\r\n  note.setName(\"(\"..data.type..\") \" .. card .. \" - \" .. string.gsub(data.label, \"(\\n)\", \"\\\\n\"))\r\n\r\n  local str = \"local data = {\"\r\n  if data.type == \"Button\" then\r\n    str = str .. \"click_function = \\\"INSERT_FUNCTION\\\"\"\r\n  elseif data.type == \"Input\" then\r\n    str = str .. \"input_function = \\\"INSERT_FUNCTION\\\"\"\r\n  end\r\n  str = str .. \", function_owner = self\"\r\n  str = str .. \", label = \\\"\" .. string.gsub(data.label, \"(\\n)\", \"\\\\n\") .. '\"'\r\n\r\n  if not table.equals(data.position,default_data.position) then\r\n    str = str .. \", position = {\" .. data.position[1]\r\n    str = str .. \", \" .. data.position[2]\r\n    str = str .. \", \" .. data.position[3] .. \"}\"\r\n  end\r\n\r\n  if not table.equals(data.rotation,default_data.rotation) then\r\n    str = str .. \", rotation = {\" .. data.rotation[1]\r\n    str = str .. \", \" .. data.rotation[2]\r\n    str = str .. \", \" .. data.rotation[3] .. \"}\"\r\n  end\r\n\r\n  if not table.equals(data.scale,default_data.scale) then\r\n    str = str .. \", scale = {\" .. data.scale[1]\r\n    str = str .. \", \" .. data.scale[2]\r\n    str = str .. \", \" .. data.scale[3] .. \"}\"\r\n  end\r\n\r\n  if tonumber(data.width) ~= tonumber(default_data.width) then\r\n    str = str .. \", width = \" .. data.width\r\n  end\r\n  if tonumber(data.height) ~= tonumber(default_data.height) then\r\n    str = str .. \", height = \" .. data.height\r\n  end\r\n  if tonumber(data.font_size) ~= tonumber(default_data.font_size) then\r\n    str = str .. \", font_size = \" .. data.font_size\r\n  end\r\n\r\n  if not table.equals(data.color,default_data.color) then\r\n    str = str .. \", color = {\" .. roundValue(data.color[1])\r\n    str = str .. \", \" .. roundValue(data.color[2])\r\n    str = str .. \", \" .. roundValue(data.color[3])\r\n    str = str .. \", \" .. roundValue(data.color[4]) .. \"}\"\r\n  end\r\n\r\n  if not table.equals(data.font_color,default_data.font_color) then\r\n    str = str .. \", font_color = {\" .. roundValue(data.font_color[1])\r\n    str = str .. \", \" .. roundValue(data.font_color[2])\r\n    str = str .. \", \" .. roundValue(data.font_color[3])\r\n    str = str .. \", \" .. roundValue(data.font_color[4]) .. \"}\"\r\n  end\r\n\r\n  if data.tooltip ~= default_data.tooltip then\r\n    str = str .. \", tooltip = \\\"\" .. string.gsub(data.label, \"(\\n)\", \"\\\\n\") .. \"\\\"\"\r\n  end\r\n\r\n  if data.alignment ~= default_data.alignment then\r\n    str = str .. \", alignment = \" .. data.alignment\r\n  end\r\n\r\n  if data.type == \"Input\" then\r\n    if data.value ~= default_data.value then\r\n      str = str .. \", value = \\\"\" .. string.gsub(data.label, \"(\\n)\", \"\\\\n\") .. \"\\\"\"\r\n    end\r\n    if data.validation ~= default_data.validation then\r\n      str = str .. \", validation = \" .. data.validation\r\n    end\r\n  end\r\n\r\n  str = str .. \"}\"\r\n  note.setDescription(str)\r\nend\r\nfunction table.equals(a,b)\r\n  if a[1] ~= b[1] then return false end\r\n  if a[2] ~= b[2] then return false end\r\n  if a[3] ~= b[3] then return false end\r\n  if a[4] ~= b[4] then return false end\r\n  return true\r\nend\r\n\r\n\r\ncolorItem = nil\r\ncolorFontItem = nil\r\nfunction createColorButton(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"color_label\", \"Color\", {pos.x,pos.y,pos.z})\r\n  createButton(\"color_alpha_label\", \"Alpha\", {pos.x-0.3,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}})\r\n  createInput(\"color_alpha_input\", \"100%\", {pos.x+0.4,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}, validation = 3, input_function = dynamicFunction(\"setAlphaColor\", function(obj, player, input_value)\r\n    if input_value == \"\" then\r\n      input_value = 100\r\n    end\r\n    savedButtons[currentEdit].color[4] = tonumber(input_value)/100\r\n  end)})\r\n\r\n  colorItem = spawnObject({type = 'reversi_chip'})\r\n  colorItem.setName(\"Color\")\r\n  colorItem.setRotation(self.getRotation())\r\n  colorItem.setPosition(self.positionToWorld({pos.x*-1-1.2, pos.y+0.1, pos.z + 0.1}))\r\n  local sca = self.getScale()\r\n  colorItem.setScale({sca.x*0.5,0.1,sca.z*0.5})\r\n\r\n  local button = {}\r\n  button.click_function = \"applyColor\"\r\n  button.function_owner = self\r\n  button.width = 1200\r\n  button.height = 400\r\n  button.font_size = 400\r\n  button.scale = {0.5,0.5,0.5}\r\n  button.font_color = {0,0,0}\r\n  button.label = 'Apply'\r\n  button.position = {0,0.1,0}\r\n  colorItem.createButton(button)\r\nend\r\nfunction applyColor()\r\n  local color = colorItem.getColorTint()\r\n  color.a = savedButtons[currentEdit].color[4]\r\n  savedButtons[currentEdit].color = color\r\n  savedButtons[currentEdit].color[4] = savedButtons[currentEdit].color.a\r\n\r\n  updateObject()\r\nend\r\nfunction createFontColorButton(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"font_color_label\", \"Font Color\", {pos.x,pos.y,pos.z}, {scale = {0.4,0.4,0.4}})\r\n  createButton(\"font_color_alpha_label\", \"Alpha\", {pos.x-0.3,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}})\r\n  createInput(\"font_color_alpha_input\", \"100%\", {pos.x+0.4,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}, validation = 3, input_function = dynamicFunction(\"setAlphaFontColor\", function(obj, player, input_value)\r\n    if input_value == \"\" then\r\n      input_value = 100\r\n    end\r\n    savedButtons[currentEdit].font_color[4] = tonumber(input_value)/100\r\n  end)})\r\n\r\n  colorFontItem = spawnObject({type = 'reversi_chip'})\r\n  colorFontItem.setName(\"Font Color\")\r\n  colorFontItem.setRotation(self.getRotation())\r\n  colorFontItem.setPosition(self.positionToWorld({pos.x*-1-1.2, pos.y+0.1, pos.z + 0.1}))\r\n  local sca = self.getScale()\r\n  colorFontItem.setScale({sca.x*0.5,0.1,sca.z*0.5})\r\n\r\n  local button = {}\r\n  button.click_function = \"applyFontColor\"\r\n  button.function_owner = self\r\n  button.width = 1200\r\n  button.height = 400\r\n  button.font_size = 400\r\n  button.scale = {0.5,0.5,0.5}\r\n  button.font_color = {0,0,0}\r\n  button.label = 'Apply'\r\n  button.position = {0,0.1,0}\r\n  colorFontItem.createButton(button)\r\nend\r\nfunction applyFontColor()\r\n  local color = colorFontItem.getColorTint()\r\n  color.a = savedButtons[currentEdit].font_color[4]\r\n  savedButtons[currentEdit].font_color = color\r\n  savedButtons[currentEdit].font_color[4] = savedButtons[currentEdit].font_color.a\r\n\r\n  updateObject()\r\nend\r\n\r\nfunction setInput(input_value, pos, selected)\r\n  if input_value == \"\" then\r\n    input_value = \"Ipso Facto\"\r\n  end\r\n\r\n  local count = select(2, string.gsub(input_value,\"(\\n)\",\"%1\"))\r\n  local modZ = 0.18*count\r\n\r\n  if selected then\r\n    editInput(\"input_label\", {label = input_value, value = input_value, position = {pos.x+4, pos.y, pos.z - modZ}, height = 380+350*(count)})\r\n  else\r\n    local fixedString = string.gsub(input_value, \"(\\n)\", \" \")\r\n    if string.len(fixedString) > 34 then\r\n      fixedString = string.sub(fixedString, 0, 31) .. \"...\"\r\n    end\r\n    editInput(\"input_label\", {label = fixedString, position = {pos.x+4, pos.y, pos.z}, height = 380})\r\n  end\r\n  savedButtons[currentEdit].label = input_value\r\n  updateValues()\r\nend\r\nfunction setTooltipInput(input_value, pos, selected)\r\n  if input_value == \"\" then\r\n    input_value = \"\"\r\n  end\r\n\r\n  local count = select(2, string.gsub(input_value,\"(\\n)\",\"%1\"))\r\n  local modZ = 0.18*count\r\n  if selected then\r\n    editInput(\"tooltip_input\", {label = input_value, value = input_value, position = {pos.x+4, pos.y, pos.z+ 0.5 - modZ}, height = 380+350*(count)})\r\n  else\r\n    local fixedString = string.gsub(input_value, \"(\\n)\", \" \")\r\n    if string.len(fixedString) > 34 then\r\n      fixedString = string.sub(fixedString, 0, 31) .. \"...\"\r\n    end\r\n    editInput(\"tooltip_input\", {label = fixedString, position = {pos.x+4, pos.y, pos.z+0.5}, height = 380})\r\n  end\r\n\r\n  savedButtons[currentEdit].tooltip = input_value\r\n\r\n  updateValues()\r\nend\r\nfunction setValueInput(input_value, pos, selected)\r\n  if input_value == \"\" then\r\n    input_value = \"\"\r\n  end\r\n\r\n  local count = select(2, string.gsub(input_value,\"(\\n)\",\"%1\"))\r\n  local modZ = 0.18*count\r\n  if selected then\r\n    editInput(\"value_input\", {label = input_value, value = input_value, position = {pos.x+4, pos.y, pos.z+ 1 - modZ}, height = 380+350*(count)})\r\n  else\r\n    local fixedString = string.gsub(input_value, \"(\\n)\", \" \")\r\n    if string.len(fixedString) > 34 then\r\n      fixedString = string.sub(fixedString, 0, 31) .. \"...\"\r\n    end\r\n    editInput(\"value_input\", {label = fixedString, position = {pos.x+4, pos.y, pos.z+1}, height = 380})\r\n  end\r\n\r\n  savedButtons[currentEdit].value = input_value\r\n\r\n  updateValues()\r\nend\r\n\r\nselectionShown = false\r\nfunction hideButtonSelect()\r\n  editButton(\"select_button\", {color={1,1,1},click_function=dynamicFunction(\"select_main_button_click\", function()\r\n    showButtonSelect()\r\n  end)})\r\n  for k,v in pairs(savedButtons) do\r\n    if v ~= \"NULL\" then\r\n      toggleButton(\"select_button\"..k, false)\r\n    end\r\n  end\r\n\r\n  selectionShown = false\r\nend\r\nfunction showButtonSelect()\r\n  editButton(\"select_button\", {color={0.5,0.5,0.5},click_function=dynamicFunction(\"select_main_button_click\", function()\r\n    hideButtonSelect()\r\n    updateValues()\r\n  end)})\r\n\r\n  local i = 1\r\n  local modZ = 0.5\r\n  for k,v in pairs(savedButtons) do\r\n    if v ~= \"NULL\" then\r\n      local buttName = \"select_button\"..k\r\n      local fixedString = string.gsub(savedButtons[k].label,\"(\\n)\",\" \")\r\n      if string.len(fixedString) > 22 then\r\n        fixedString = string.sub(fixedString, 0, 19) .. \"...\"\r\n      end\r\n\r\n      local label = k ..' - '.. fixedString\r\n      --local count = select(2, string.gsub(savedButtons[k].label,\"(\\n)\",\"%1\"))\r\n      local table = {font_color={0,0,0},\r\n      width=5000,\r\n      height=400,--+400,--*count,\r\n      click_function = dynamicFunction(\"select_button_click\"..k,\r\n      function()\r\n        currentEdit = k\r\n        hideButtonSelect()\r\n        updateValues()\r\n      end)}\r\n      modZ = modZ --+ --0.2 * count\r\n      local posi = {dropPos.x+3.5,dropPos.y+0.3,dropPos.z+modZ}\r\n      createButton(buttName, label, posi, table)\r\n      i = i + 1\r\n      modZ = modZ + 0.5 --+ 0.2*(count)\r\n    end\r\n  end\r\n\r\n  selectionShown = true\r\nend\r\n\r\nfunction createLabelButtons(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"label_label\", \"Label\", {pos.x,pos.y,pos.z})\r\n  createInput(\"input_label\", default_values.label, {pos.x+4,pos.y,pos.z}, {input_function = dynamicFunction(\"setLabel\", function(obj, player, input_value, selected) setInput(input_value, pos, selected) end), width = 6000})\r\n\r\n  createButton(\"tooltip_label\", \"Tooltip\", {pos.x,pos.y,pos.z+0.5})\r\n  createInput(\"tooltip_input\", \"None\", {pos.x+4,pos.y,pos.z+0.5}, {input_function = dynamicFunction(\"setTooltip\", function(obj, player, input_value, selected) setTooltipInput(input_value, pos, selected) end), width = 6000})\r\n\r\n  createButton(\"value_label\", \"Value\", {pos.x,pos.y,pos.z+1})\r\n  createInput(\"value_input\", \"None\", {pos.x+4,pos.y,pos.z+1}, {input_function = dynamicFunction(\"setValue\", function(obj, player, input_value, selected) setValueInput(input_value, pos, selected) end), width = 6000})\r\n\r\n  --Alignment Selection\r\n  createButton(\"alignment_label\", \"Alignment\", {pos.x+8.5,pos.y,pos.z})\r\n  createButton(\"alignment_auto_select\", \"A\", {pos.x+10,pos.y,pos.z},\r\n    {click_function = dynamicFunction(\"selectAlign_Auto\", function() selectAlignment(\"auto\") end),tooltip=\"Automatic\",width=400,height=400,font_color={0,0,0}})\r\n  createButton(\"alignment_left_select\", \"L\", {pos.x+10.5,pos.y,pos.z},\r\n    {click_function = dynamicFunction(\"selectAlign_Left\", function() selectAlignment(\"left\") end),tooltip=\"Left\",width=400,height=400,font_color={0,0,0}})\r\n  createButton(\"alignment_center_select\", \"C\", {pos.x+11,pos.y,pos.z},\r\n    {click_function = dynamicFunction(\"selectAlign_Center\", function() selectAlignment(\"center\") end),tooltip=\"Center\",width=400,height=400,font_color={0,0,0}})\r\n  createButton(\"alignment_right_select\", \"R\", {pos.x+11.5,pos.y,pos.z},\r\n    {click_function = dynamicFunction(\"selectAlign_Right\", function() selectAlignment(\"right\") end),tooltip=\"Right\",width=400,height=400,font_color={0,0,0}})\r\n  createButton(\"alignment_just_select\", \"J\", {pos.x+12,pos.y,pos.z},\r\n    {click_function = dynamicFunction(\"selectAlign_Just\", function() selectAlignment(\"just\") end),tooltip=\"Justified\",width=400,height=400,font_color={0,0,0}})\r\n\r\n    --Alignment Selection\r\n  createButton(\"validation_label\", \"Validation\", {pos.x+8.5,pos.y,pos.z+1})\r\n  createButton(\"validation_none_select\", \" \", {pos.x+10,pos.y,pos.z+1},\r\n    {click_function = dynamicFunction(\"selectVali_None\", function() selectValidation(\"none\") end),tooltip=\"None\",width=400,height=400,font_color={0,0,0}})\r\n  createButton(\"validation_integer_select\", \"#\", {pos.x+10.5,pos.y,pos.z+1},\r\n    {click_function = dynamicFunction(\"selectVali_Integer\", function() selectValidation(\"integer\") end),tooltip=\"Integer\",width=400,height=400,font_color={0,0,0}})\r\n  createButton(\"validation_float_select\", \"0.1\", {pos.x+11,pos.y,pos.z+1},\r\n    {click_function = dynamicFunction(\"selectVali_Float\", function() selectValidation(\"float\") end),tooltip=\"Float\",width=400,height=400,font_size=300,font_color={0,0,0}})\r\n  createButton(\"validation_alpha_select\", \"A#\", {pos.x+11.5,pos.y,pos.z+1},\r\n    {click_function = dynamicFunction(\"selectVali_Alpha\", function() selectValidation(\"alpha\") end),tooltip=\"Alphanumeric\",width=400,height=400,font_size=300,font_color={0,0,0}})\r\n  createButton(\"validation_user_select\", \"U\", {pos.x+12,pos.y,pos.z+1},\r\n    {click_function = dynamicFunction(\"selectVali_User\", function() selectValidation(\"user\") end),tooltip=\"Username\",width=400,height=400,font_color={0,0,0}})\r\n  createButton(\"validation_name_select\", \"N\", {pos.x+12.5,pos.y,pos.z+1},\r\n    {click_function = dynamicFunction(\"selectVali_Name\", function() selectValidation(\"name\") end),tooltip=\"Name\",width=400,height=400,font_color={0,0,0}})\r\n\r\n  --Type Selection\r\n  createButton(\"type_label\", \"Type\", {pos.x+8.5,pos.y,pos.z+0.5})\r\n  createButton(\"button_label\", \"Button\", {pos.x+10.3,pos.y,pos.z+0.5})\r\n  createButton(\"type_button_label\", \"\\u{25C9}\", {pos.x+9.5,pos.y,pos.z+0.5})\r\n  createButton(\"type_button_click\", \"\\u{25C9}\", {pos.x+9.5,pos.y,pos.z+0.5},\r\n    {click_function = dynamicFunction(\"selectType_Button\", function() toggleType(\"Button\") end), width=400, height=400, color={r=0,g=0,b=0,a=0}})\r\n  createButton(\"input_label\", \"Input\", {pos.x+12,pos.y,pos.z+0.5})\r\n  createButton(\"type_input_label\", \"\\u{25CB}\", {pos.x+11.3,pos.y,pos.z+0.5})\r\n  createButton(\"type_input_click\", \"\\u{25CB}\", {pos.x+11.3,pos.y,pos.z+0.5},\r\n    {click_function = dynamicFunction(\"selectType_Input\", function() toggleType(\"Input\") end), width=400, height=400, color={r=0,g=0,b=0,a=0}})\r\nend\r\nfunction createPositionButtons(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"position_label\", \"Position\", {pos.x,pos.y,pos.z})\r\n\r\n  createButton(\"position_x_label\", \"X\", {pos.x+1,pos.y,pos.z-0.4}, {font_color = {219/255,26/255,24/255}})\r\n  createButton(\"position_y_label\", \"Y\", {pos.x+1,pos.y,pos.z}, {font_color = {49/255,179/255,43/255}})\r\n  createButton(\"position_z_label\", \"Z\", {pos.x+1,pos.y,pos.z+0.4}, {font_color = {31/255,136/255,255/255}})\r\n\r\n  createInput(\"position_x_input\", \"0.0\", {pos.x+1.9,pos.y,pos.z-0.4}, {validation = 3, input_function = dynamicFunction(\"setXPos\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].position[1] = tonumber(input_value) updateObject() end)})\r\n  createInput(\"position_y_input\", \"0.0\", {pos.x+1.9,pos.y,pos.z}, {validation = 3, input_function = dynamicFunction(\"setYPos\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].position[2] = tonumber(input_value) updateObject() end)})\r\n  createInput(\"position_z_input\", \"0.0\", {pos.x+1.9,pos.y,pos.z+0.4}, {validation = 3, input_function = dynamicFunction(\"setZPos\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].position[3] = tonumber(input_value) updateObject() end)})\r\n\r\n  createButton(\"position_x_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}})\r\n  createButton(\"position_x_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addXPos\", function()\r\n    savedButtons[currentEdit].position[1] = roundValue(savedButtons[currentEdit].position[1]+increment_value.position)\r\n    editInput('position_x_input',{value = savedButtons[currentEdit].position[1]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"position_x_sub\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}})\r\n  createButton(\"position_x_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subXPos\", function()\r\n    savedButtons[currentEdit].position[1] = roundValue(savedButtons[currentEdit].position[1]-increment_value.position)\r\n    editInput('position_x_input',{value = savedButtons[currentEdit].position[1]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"position_y_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}})\r\n  createButton(\"position_y_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addYPos\",\r\n  function()\r\n    savedButtons[currentEdit].position[2] = roundValue(savedButtons[currentEdit].position[2]+increment_value.position)\r\n    editInput('position_y_input',{value = savedButtons[currentEdit].position[2]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"position_y_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}})\r\n  createButton(\"position_y_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subYPos\",\r\n  function()\r\n    savedButtons[currentEdit].position[2] = roundValue(savedButtons[currentEdit].position[2]-increment_value.position)\r\n    editInput('position_y_input',{value = savedButtons[currentEdit].position[2]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"position_z_add\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}})\r\n  createButton(\"position_z_add_button\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addZPos\",\r\n  function()\r\n    savedButtons[currentEdit].position[3] = roundValue(savedButtons[currentEdit].position[3]+increment_value.position)\r\n    editInput('position_z_input',{value = savedButtons[currentEdit].position[3]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"position_z_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}})\r\n  createButton(\"position_z_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subZPos\",\r\n  function()\r\n    savedButtons[currentEdit].position[3] = roundValue(savedButtons[currentEdit].position[3]-increment_value.position)\r\n    editInput('position_z_input',{value = savedButtons[currentEdit].position[3]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"position_increment_label\", \"Increment:\", {pos.x-0.3,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}})\r\n  createInput(\"position_increment_input\", \"0.1\", {pos.x+0.4,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}, validation = 3, input_function = dynamicFunction(\"setPosIncrement\", function(obj, player, input_value)\r\n    if input_value == \"\" then\r\n      input_value = 0.1\r\n    end\r\n    increment_value.position = tonumber(input_value)\r\n  end)})\r\nend\r\nfunction createRotationButtons(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"rotation_label\", \"Rotation\", {pos.x,pos.y,pos.z})\r\n\r\n  createButton(\"rotation_x_label\", \"X\", {pos.x+1,pos.y,pos.z-0.4}, {font_color = {219/255,26/255,24/255}})\r\n  createButton(\"rotation_y_label\", \"Y\", {pos.x+1,pos.y,pos.z}, {font_color = {49/255,179/255,43/255}})\r\n  createButton(\"rotation_z_label\", \"Z\", {pos.x+1,pos.y,pos.z+0.4}, {font_color = {31/255,136/255,255/255}})\r\n\r\n  createInput(\"rotation_x_input\", \"0.0\", {pos.x+1.9,pos.y,pos.z-0.4}, {validation = 3, input_function = dynamicFunction(\"setXRot\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].rotation[1] = tonumber(input_value) updateObject() end)})\r\n  createInput(\"rotation_y_input\", \"0.0\", {pos.x+1.9,pos.y,pos.z}, {validation = 3, input_function = dynamicFunction(\"setYRot\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].rotation[2] = tonumber(input_value) updateObject() end)})\r\n  createInput(\"rotation_z_input\", \"0.0\", {pos.x+1.9,pos.y,pos.z+0.4}, {validation = 3, input_function = dynamicFunction(\"setZRot\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].rotation[3] = tonumber(input_value) updateObject() end)})\r\n\r\n  createButton(\"rotation_x_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}})\r\n  createButton(\"rotation_x_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addXRot\", function()\r\n    savedButtons[currentEdit].rotation[1] = roundValue(savedButtons[currentEdit].rotation[1]+increment_value.rotation)\r\n    editInput('rotation_x_input',{value = savedButtons[currentEdit].rotation[1]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"rotation_x_sub\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}})\r\n  createButton(\"rotation_x_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subXRot\", function()\r\n    savedButtons[currentEdit].rotation[1] = roundValue(savedButtons[currentEdit].rotation[1]-increment_value.rotation)\r\n    editInput('rotation_x_input',{value = savedButtons[currentEdit].rotation[1]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"rotation_y_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}})\r\n  createButton(\"rotation_y_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addYRot\",\r\n  function()\r\n    savedButtons[currentEdit].rotation[2] = roundValue(savedButtons[currentEdit].rotation[2]+increment_value.rotation)\r\n    editInput('rotation_y_input',{value = savedButtons[currentEdit].rotation[2]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"rotation_y_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}})\r\n  createButton(\"rotation_y_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subYRot\",\r\n  function()\r\n    savedButtons[currentEdit].rotation[2] = roundValue(savedButtons[currentEdit].rotation[2]-increment_value.rotation)\r\n    editInput('rotation_y_input',{value = savedButtons[currentEdit].rotation[2]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"rotation_z_add\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}})\r\n  createButton(\"rotation_z_add_button\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addZRot\",\r\n  function()\r\n    savedButtons[currentEdit].rotation[3] = roundValue(savedButtons[currentEdit].rotation[3]+increment_value.rotation)\r\n    editInput('rotation_z_input',{value = savedButtons[currentEdit].rotation[3]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"rotation_z_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}})\r\n  createButton(\"rotation_z_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subZRot\",\r\n  function()\r\n    savedButtons[currentEdit].rotation[3] = roundValue(savedButtons[currentEdit].rotation[3]-increment_value.rotation)\r\n    editInput('rotation_z_input',{value = savedButtons[currentEdit].rotation[3]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"rotation_increment_label\", \"Increment:\", {pos.x-0.3,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}})\r\n  createInput(\"rotation_increment_input\", \"10\", {pos.x+0.4,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}, validation = 3, input_function = dynamicFunction(\"setRotIncrement\", function(obj, player, input_value)\r\n    if input_value == \"\" then\r\n      input_value = 10\r\n    end\r\n    increment_value.rotation = tonumber(input_value)\r\n  end)})\r\nend\r\nfunction createScaleButtons(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"scale_label\", \"Scale\", {pos.x,pos.y,pos.z})\r\n\r\n  createButton(\"scale_x_label\", \"X\", {pos.x+1,pos.y,pos.z-0.4}, {font_color = {219/255,26/255,24/255}})\r\n  createButton(\"scale_y_label\", \"Y\", {pos.x+1,pos.y,pos.z}, {font_color = {49/255,179/255,43/255}})\r\n  createButton(\"scale_z_label\", \"Z\", {pos.x+1,pos.y,pos.z+0.4}, {font_color = {31/255,136/255,255/255}})\r\n\r\n  createInput(\"scale_x_input\", \"0.5\", {pos.x+1.9,pos.y,pos.z-0.4}, {validation = 3, input_function = dynamicFunction(\"setXScale\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].scale[1] = tonumber(input_value) updateObject() end)})\r\n  createInput(\"scale_y_input\", \"0.5\", {pos.x+1.9,pos.y,pos.z}, {validation = 3, input_function = dynamicFunction(\"setYScale\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].scale[2] = tonumber(input_value) updateObject() end)})\r\n  createInput(\"scale_z_input\", \"0.5\", {pos.x+1.9,pos.y,pos.z+0.4}, {validation = 3, input_function = dynamicFunction(\"setZScale\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].scale[3] = tonumber(input_value) updateObject() end)})\r\n\r\n  createButton(\"scale_x_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}})\r\n  createButton(\"scale_x_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addXScale\", function()\r\n    savedButtons[currentEdit].scale[1] = roundValue(savedButtons[currentEdit].scale[1]+increment_value.scale)\r\n    editInput('scale_x_input',{value = savedButtons[currentEdit].scale[1]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"scale_x_sub\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}})\r\n  createButton(\"scale_x_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subXScale\", function()\r\n    savedButtons[currentEdit].scale[1] = roundValue(savedButtons[currentEdit].scale[1]-increment_value.scale)\r\n    editInput('scale_x_input',{value = savedButtons[currentEdit].scale[1]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"scale_y_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}})\r\n  createButton(\"scale_y_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addYScale\",\r\n  function()\r\n    savedButtons[currentEdit].scale[2] = roundValue(savedButtons[currentEdit].scale[2]+increment_value.scale)\r\n    editInput('scale_y_input',{value = savedButtons[currentEdit].scale[2]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"scale_y_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}})\r\n  createButton(\"scale_y_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subYScale\",\r\n  function()\r\n    savedButtons[currentEdit].scale[2] = roundValue(savedButtons[currentEdit].scale[2]-increment_value.scale)\r\n    editInput('scale_y_input',{value = savedButtons[currentEdit].scale[2]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"scale_z_add\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}})\r\n  createButton(\"scale_z_add_button\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addZScale\",\r\n  function()\r\n    savedButtons[currentEdit].scale[3] = roundValue(savedButtons[currentEdit].scale[3]+increment_value.scale)\r\n    editInput('scale_z_input',{value = savedButtons[currentEdit].scale[3]})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"scale_z_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}})\r\n  createButton(\"scale_z_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subZScale\",\r\n  function()\r\n    savedButtons[currentEdit].scale[3] = roundValue(savedButtons[currentEdit].scale[3]-increment_value.scale)\r\n    editInput('scale_z_input',{value = savedButtons[currentEdit].scale[3]})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"scale_increment_label\", \"Increment:\", {pos.x-0.3,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}})\r\n  createInput(\"scale_increment_input\", \"0.1\", {pos.x+0.4,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}, validation = 3, input_function = dynamicFunction(\"setSacIncrement\", function(obj, player, input_value)\r\n    if input_value == \"\" then\r\n      input_value = 0.1\r\n    end\r\n    increment_value.scale = tonumber(input_value)\r\n  end)})\r\nend\r\nfunction createDimensionButtons(pos)\r\n  if not pos.x then pos.x = pos[1] end\r\n  if not pos.y then pos.y = pos[2] end\r\n  if not pos.z then pos.z = pos[3] end\r\n\r\n  createButton(\"dimension_label\", \"Dimensions\", {pos.x-1.3,pos.y,pos.z})\r\n\r\n  createButton(\"dimension_x_label\", \"Width\", {pos.x+0.5,pos.y,pos.z-0.4}, {font_color = {219/255,26/255,24/255}})\r\n  createButton(\"dimension_y_label\", \"Height\", {pos.x+0.5,pos.y,pos.z}, {font_color = {49/255,179/255,43/255}})\r\n  createButton(\"dimension_z_label\", \"Font Size\", {pos.x+0.5,pos.y,pos.z+0.4}, {font_size = 300,font_color = {31/255,136/255,255/255}})\r\n\r\n  createInput(\"dimension_x_input\", \"2000\", {pos.x+1.9,pos.y,pos.z-0.4}, {validation = 3, input_function = dynamicFunction(\"setWidth\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].width = tonumber(input_value) updateObject() end)})\r\n  createInput(\"dimension_y_input\", \"400\", {pos.x+1.9,pos.y,pos.z}, {validation = 3, input_function = dynamicFunction(\"setHeight\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].height = tonumber(input_value) updateObject() end)})\r\n  createInput(\"dimension_z_input\", \"400\", {pos.x+1.9,pos.y,pos.z+0.4}, {validation = 3, input_function = dynamicFunction(\"setFont_Size\", function(obj, player, input_value) if input_value == \"\" then input_value = 0.0 end savedButtons[currentEdit].font_size = tonumber(input_value) updateObject() end)})\r\n\r\n  createButton(\"dimension_x_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}})\r\n  createButton(\"dimension_x_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.5}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addWidth\", function()\r\n    savedButtons[currentEdit].width = roundValue(savedButtons[currentEdit].width+increment_value.dimension)\r\n    editInput('dimension_x_input',{value = savedButtons[currentEdit].width})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"dimension_x_sub\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}})\r\n  createButton(\"dimension_x_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z-0.3}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subWidth\", function()\r\n    savedButtons[currentEdit].width = roundValue(savedButtons[currentEdit].width-increment_value.dimension)\r\n    editInput('dimension_x_input',{value = savedButtons[currentEdit].width})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"dimension_y_add\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}})\r\n  createButton(\"dimension_y_add_button\", \">\", {pos.x+2.82, pos.y, pos.z-0.1}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addHeight\",\r\n  function()\r\n    savedButtons[currentEdit].height = roundValue(savedButtons[currentEdit].height+increment_value.dimension)\r\n    editInput('dimension_y_input',{value = savedButtons[currentEdit].height})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"dimension_y_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}})\r\n  createButton(\"dimension_y_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.1}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subHeight\",\r\n  function()\r\n    savedButtons[currentEdit].height = roundValue(savedButtons[currentEdit].height-increment_value.dimension)\r\n    editInput('dimension_y_input',{value = savedButtons[currentEdit].height})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"dimension_z_add\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}})\r\n  createButton(\"dimension_z_add_button\", \">\", {pos.x+2.82, pos.y, pos.z+0.3}, {rotation = {0,-90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"addFont_Size\",\r\n  function()\r\n    savedButtons[currentEdit].font_size = roundValue(savedButtons[currentEdit].font_size+increment_value.dimension)\r\n    editInput('dimension_z_input',{value = savedButtons[currentEdit].font_size})\r\n    updateObject()\r\n  end)})\r\n  createButton(\"dimension_z_sub\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}})\r\n  createButton(\"dimension_z_sub_button\", \">\", {pos.x+2.79, pos.y, pos.z+0.5}, {rotation = {0,90,0}, width = 200, height = 400, color = {0,0,0,0}, click_function = dynamicFunction(\"subFont_Size\",\r\n  function()\r\n    savedButtons[currentEdit].font_size = roundValue(savedButtons[currentEdit].font_size-increment_value.dimension)\r\n    editInput('dimension_z_input',{value = savedButtons[currentEdit].font_size})\r\n    updateObject()\r\n  end)})\r\n\r\n  createButton(\"dimension_increment_label\", \"Increment:\", {pos.x-1.6,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}})\r\n  createInput(\"dimension_increment_input\", \"100\", {pos.x-0.9,pos.y,pos.z+0.3}, {scale = {0.2,0.2,0.2}, validation = 3, input_function = dynamicFunction(\"setDymIncrement\", function(obj, player, input_value)\r\n    if input_value == \"\" then\r\n      input_value = 100\r\n    end\r\n    increment_value.dimension = tonumber(input_value)\r\n  end)})\r\nend\r\n\r\n\r\n\r\n--Value Functions\r\nfunction selectValidation(type)\r\n  local button = {color = {1,1,1,1}}\r\n\r\n  editButton('validation_none_select',button)\r\n  editButton('validation_integer_select',button)\r\n  editButton('validation_float_select',button)\r\n  editButton('validation_alpha_select',button)\r\n  editButton('validation_user_select',button)\r\n  editButton('validation_name_select',button)\r\n\r\n  if type == 1 then type = \"none\"\r\n  elseif type == 2 then type = \"integer\"\r\n  elseif type == 3 then type = \"float\"\r\n  elseif type == 4 then type = \"alpha\"\r\n  elseif type == 5 then type = \"user\"\r\n  elseif type == 6 then type = \"name\" end\r\n\r\n  button = {color = {0.5,0.5,0.5,1}}\r\n  editButton('validation_'..type..'_select',button)\r\n\r\n  if type == \"none\" then type = 1\r\n  elseif type == \"integer\" then type = 2\r\n  elseif type == \"float\" then type = 3\r\n  elseif type == \"alpha\" then type = 4\r\n  elseif type == \"user\" then type = 5\r\n  elseif type == \"name\" then type = 6 end\r\n\r\n  savedButtons[currentEdit].validation = type\r\n  updateObject()\r\nend\r\nfunction selectAlignment(type)\r\n  local button = {color = {1,1,1,1}}\r\n\r\n  editButton('alignment_auto_select',button)\r\n  editButton('alignment_left_select',button)\r\n  editButton('alignment_center_select',button)\r\n  editButton('alignment_right_select',button)\r\n  editButton('alignment_just_select',button)\r\n\r\n  if type == 1 then type = \"auto\"\r\n  elseif type == 2 then type = \"left\"\r\n  elseif type == 3 then type = \"center\"\r\n  elseif type == 4 then type = \"right\"\r\n  elseif type == 5 then type = \"just\" end\r\n\r\n  button = {color = {0.5,0.5,0.5,1}}\r\n  editButton('alignment_'..type..'_select',button)\r\n\r\n  if type == \"auto\" then type = 1\r\n  elseif type == \"left\" then type = 2\r\n  elseif type == \"center\" then type = 3\r\n  elseif type == \"right\" then type = 4\r\n  elseif type == \"just\" then type = 5 end\r\n\r\n  savedButtons[currentEdit].alignment = type\r\n  updateObject()\r\nend\r\nfunction toggleType(type)\r\n  savedButtons[currentEdit].type = type\r\n\r\n  if type == \"Button\" then\r\n    editButton('type_button_label', {label = '\\u{25C9}'})\r\n    editButton('type_input_label', {label = '\\u{25CB}'})\r\n\r\n    toggleButton(\"value_label\", false)\r\n    toggleInput(\"value_input\", false)\r\n\r\n    toggleButton(\"validation_label\", false)\r\n    toggleButton(\"validation_none_select\", false)\r\n    toggleButton(\"validation_integer_select\", false)\r\n    toggleButton(\"validation_float_select\", false)\r\n    toggleButton(\"validation_alpha_select\", false)\r\n    toggleButton(\"validation_user_select\", false)\r\n    toggleButton(\"validation_name_select\", false)\r\n  elseif type == \"Input\" then\r\n    editButton('type_button_label', {label = '\\u{25CB}'})\r\n    editButton('type_input_label', {label = '\\u{25C9}'})\r\n\r\n    toggleButton(\"value_label\", true)\r\n    toggleInput(\"value_input\", true)\r\n\r\n    toggleButton(\"validation_label\", true)\r\n    toggleButton(\"validation_none_select\", true)\r\n    toggleButton(\"validation_integer_select\", true)\r\n    toggleButton(\"validation_float_select\", true)\r\n    toggleButton(\"validation_alpha_select\", true)\r\n    toggleButton(\"validation_user_select\", true)\r\n    toggleButton(\"validation_name_select\", true)\r\n  end\r\n  updateObject()\r\nend\r\n\r\n\r\n--Show and Hide Button/Input\r\nfunction toggleButton(index,show)\r\n  if not buttonIndex[index] then\r\n    print(\"[ff0000]<Error>[ffffff] Can't toggle button [\" .. index .. \"]\")\r\n  end\r\n  self.editButton({index = buttonIndex[index], scale = {show and 0.5 or 0,show and 0.5 or 0,show and 0.5 or 0}})\r\nend\r\nfunction toggleInput(index,show)\r\n  if not inputIndex[index] then\r\n    print(\"[ff0000]<Error>[ffffff] Can't toggle input [\" .. index .. \"]\")\r\n  end\r\n  self.editInput({index = inputIndex[index], scale = {show and 0.5 or 0,show and 0.5 or 0,show and 0.5 or 0}})\r\nend\r\n\r\n-- Create and Edit Button/Input\r\nfunction createInput(index, label, position, overrides)\r\n  local input_parameters = {}\r\n  input_parameters.input_function = \"nilFunction\"\r\n  input_parameters.function_owner = self\r\n  input_parameters.label = label\r\n  input_parameters.position = position\r\n  input_parameters.rotation = {0,0,0}\r\n  input_parameters.scale = {0.5,0.5,0.5}\r\n  input_parameters.width = 1400\r\n  input_parameters.height = 380\r\n  input_parameters.font_size = 350\r\n  input_parameters.color = {1,1,1,1}\r\n  input_parameters.font_color = {0,0,0,1}\r\n  input_parameters.tooltip = \"\"\r\n  input_parameters.alignment = 3\r\n  input_parameters.value = \"\"\r\n  input_parameters.validation = 1\r\n\r\n  if overrides ~= nil then\r\n    for k,v in pairs(overrides) do\r\n      input_parameters[k] = v\r\n    end\r\n  end\r\n\r\n  if not inputIndex[index] then\r\n    self.createInput(input_parameters)\r\n    inputIndex[index] = #self.getInputs() - 1\r\n  else\r\n    input_parameters.index = inputIndex[index]\r\n    self.editInput(input_parameters)\r\n  end\r\nend\r\nfunction createButton(index, label, position, overrides)\r\n  local button_parameters = {}\r\n  button_parameters.click_function = 'nilFunction'\r\n  button_parameters.function_owner = self\r\n  button_parameters.label = label\r\n  button_parameters.position = position\r\n  button_parameters.rotation = {0,0,0}\r\n  button_parameters.scale = {0.5,0.5,0.5}\r\n  button_parameters.width = 0\r\n  button_parameters.height = 0\r\n  button_parameters.font_size = 400\r\n  button_parameters.color = {1,1,1,1}\r\n  button_parameters.font_color = {1,1,1,1}\r\n  button_parameters.tooltip = \"\"\r\n  button_parameters.alignment = 3\r\n\r\n  if overrides ~= nil then\r\n    for k,v in pairs(overrides) do\r\n      button_parameters[k] = v\r\n    end\r\n  end\r\n\r\n  if not buttonIndex[index] then\r\n    self.createButton(button_parameters)\r\n    buttonIndex[index] = #self.getButtons() - 1\r\n  else\r\n    button_parameters.index = buttonIndex[index]\r\n    self.editButton(button_parameters)\r\n  end\r\nend\r\nfunction editInput(index, update)\r\n  if not inputIndex[index] then\r\n    print(\"[ff0000]<Error>[ffffff] Can't edit input - [\" .. index .. \"]\")\r\n  end\r\n\r\n  update.index = inputIndex[index]\r\n  self.editInput(update)\r\n\r\n  if dev then\r\n    print(\"[ffFF00]<LOG>[ffffff] Edited - [\" .. index .. \"]\")\r\n    for k,v in pairs(self.getInputs()[update.index+1]) do\r\n      if type(v) ~= \"table\" and v ~= self then\r\n        --print(\"     \" .. k .. \" - \" .. v)\r\n      end\r\n    end\r\n  end\r\nend\r\nfunction editButton(index, update)\r\n  if not buttonIndex[index] then\r\n    print(\"[ff0000]<Error>[ffffff] Can't edit button [\" .. index .. \"]\")\r\n  end\r\n  update.index = buttonIndex[index]\r\n  self.editButton(update)\r\nend\r\n\r\nfunction getInputValue(index)\r\n  if not inputIndex[index] then\r\n    print(\"[ff0000]<Error>[ffffff] Can't edit input - [\" .. index .. \"]\")\r\n  end\r\n  local value = self.getInputs()[inputIndex[index]+1].value\r\n  if value == \"\" or value == nil then\r\n    value = 0\r\n  end\r\n  return value\r\nend\r\n\r\n\r\n-- Misc Functions\r\nfunction dynamicFunction(funcName, func)\r\n  self.setVar(funcName, func)\r\n  return funcName\r\nend\r\nfunction table.clone(orig)\r\n  local orig_type = type(orig)\r\n  local copy = nil\r\n  if orig_type == 'table' then\r\n    copy = {}\r\n    for orig_key, orig_value in next, orig, nil do\r\n      copy[table.clone(orig_key)] = table.clone(orig_value)\r\n    end\r\n    setmetatable(copy, table.clone(getmetatable(orig)))\r\n  else -- number, string, boolean, etc\r\n    copy = orig\r\n  end\r\n  return copy\r\nend\r\nfunction roundValue(val)\r\n  local tempVal = val * 10000\r\n  tempVal = math.floor(tempVal + 0.1)\r\n  tempVal = tempVal/10000\r\n  if math.abs(tempVal) < 0.00001 then\r\n    tempVal = 0\r\n  end\r\n  return tempVal\r\nend\r\nfunction nilFunction() return end",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": -1.70000148,
            "y": 0.136003062,
            "z": 1.10000062
          },
          "Rotation": {
            "x": -4.99081068E-07,
            "y": 3.59706279E-16,
            "z": -8.259039E-08
          }
        },
        {
          "Position": {
            "x": -4.700001,
            "y": 0.136003,
            "z": 1.10000038
          },
          "Rotation": {
            "x": 2.80811577E-07,
            "y": -1.78779623E-15,
            "z": -7.29550948E-07
          }
        }
      ]
    },
    {
      "GUID": "49df24",
      "Name": "backgammon_piece_white",
      "Transform": {
        "posX": 7.25,
        "posY": 0.6940806,
        "posZ": 1.25000012,
        "rotX": -6.79330469E-07,
        "rotY": 359.993225,
        "rotZ": -1.25148745E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.735294163,
        "g": 0.735294163,
        "b": 0.735294163
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "c9c4c8",
      "Name": "Deck",
      "Transform": {
        "posX": 6.998716,
        "posY": 1.23126066,
        "posZ": 4.99990463,
        "rotX": -2.72230132E-08,
        "rotY": 179.974289,
        "rotZ": 180.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": false,
      "SidewaysCard": false,
      "DeckIDs": [
        46,
        0,
        7,
        49,
        15,
        22,
        6,
        9,
        25,
        29,
        43,
        32,
        30,
        28,
        45,
        33,
        40,
        37,
        5,
        36,
        14,
        21,
        39,
        48,
        2,
        24,
        1,
        3,
        35,
        51,
        19,
        16,
        11,
        38,
        31,
        50,
        44,
        42,
        20,
        17,
        27,
        47,
        8,
        34,
        26,
        41,
        4,
        12,
        10,
        23,
        18,
        13
      ],
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "4d0ec5",
          "Name": "Card",
          "Transform": {
            "posX": 6.49619627,
            "posY": 1.77893722,
            "posZ": 4.499412,
            "rotX": 0.00224606786,
            "rotY": 179.992523,
            "rotZ": 194.3526,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "huit"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 46,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "24ca4e",
          "Name": "Card",
          "Transform": {
            "posX": 32.500145,
            "posY": 0.989902,
            "posZ": -9.500576,
            "rotX": 0.609907746,
            "rotY": 179.998932,
            "rotZ": -8.60839E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "roi"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 0,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "f48994",
          "Name": "Card",
          "Transform": {
            "posX": 31.5,
            "posY": 0.973605037,
            "posZ": 6.5,
            "rotX": 2.30319888E-08,
            "rotY": 180.0,
            "rotZ": 3.656821E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "valet"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 7,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "8478b5",
          "Name": "Card",
          "Transform": {
            "posX": 24.0002117,
            "posY": 0.9881734,
            "posZ": -4.00000858,
            "rotX": 5.39529246E-05,
            "rotY": 180.000839,
            "rotZ": 0.7787797,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "quatre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 49,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b417ae",
          "Name": "Card",
          "Transform": {
            "posX": 23.5,
            "posY": 0.973604739,
            "posZ": 9.5,
            "rotX": -6.6129914E-08,
            "rotY": 180.0,
            "rotZ": -5.16445652E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "neuf"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 15,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "c3804c",
          "Name": "Card",
          "Transform": {
            "posX": 23.0,
            "posY": 0.9736053,
            "posZ": -12.0,
            "rotX": 8.320454E-08,
            "rotY": 180.0,
            "rotZ": -2.78787439E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "deux"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 22,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "656128",
          "Name": "Card",
          "Transform": {
            "posX": 19.0,
            "posY": 0.973604739,
            "posZ": -5.0,
            "rotX": 8.02415968E-07,
            "rotY": 180.0,
            "rotZ": 3.615752E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "reine",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "reine"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 6,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "0d0de9",
          "Name": "Card",
          "Transform": {
            "posX": 31.00004,
            "posY": 0.9735835,
            "posZ": 14.0000134,
            "rotX": 0.000224464049,
            "rotY": 179.999176,
            "rotZ": -0.00134013221,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "dix"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 9,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "7aa227",
          "Name": "Card",
          "Transform": {
            "posX": 22.0001583,
            "posY": 0.9881419,
            "posZ": -4.00000954,
            "rotX": 6.96356146E-05,
            "rotY": 180.00209,
            "rotZ": 0.777039468,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "quatre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 25,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "f8a923",
          "Name": "Card",
          "Transform": {
            "posX": 17.9998856,
            "posY": 0.9881504,
            "posZ": -11.99998,
            "rotX": 6.6438E-05,
            "rotY": 180.000916,
            "rotZ": 359.222443,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "deux"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 29,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "538d6e",
          "Name": "Card",
          "Transform": {
            "posX": 21.4999828,
            "posY": 0.9736054,
            "posZ": 1.49998927,
            "rotX": 8.555328E-07,
            "rotY": 179.999084,
            "rotZ": 3.42897988E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "six"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 43,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "12d282",
          "Name": "Card",
          "Transform": {
            "posX": 27.0,
            "posY": 0.973605,
            "posZ": 7.0,
            "rotX": -2.09777809E-07,
            "rotY": 180.0,
            "rotZ": -9.599829E-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "valet"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 32,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "ecaae2",
          "Name": "Card",
          "Transform": {
            "posX": 33.9999466,
            "posY": 0.973602057,
            "posZ": -7.00003529,
            "rotX": 9.606907E-05,
            "rotY": 179.999847,
            "rotZ": -0.000323328481,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "roi"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 30,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "215b43",
          "Name": "Card",
          "Transform": {
            "posX": 20.0,
            "posY": 0.973604739,
            "posZ": -8.0,
            "rotX": -1.19154556E-07,
            "rotY": 180.0,
            "rotZ": -5.331457E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "trois"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 28,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "5180b1",
          "Name": "Card",
          "Transform": {
            "posX": 26.0,
            "posY": 0.973604739,
            "posZ": 9.0,
            "rotX": -1.08514953E-07,
            "rotY": 180.0,
            "rotZ": -4.738392E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "neuf"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 45,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "a91aee",
          "Name": "Card",
          "Transform": {
            "posX": 20.9999962,
            "posY": 1.39866424,
            "posZ": 0.999999,
            "rotX": -2.27471833E-06,
            "rotY": 180.000412,
            "rotZ": -0.0005303163,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "as",
            "chiffre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 33,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "4a8987",
          "Name": "Card",
          "Transform": {
            "posX": 21.00007,
            "posY": 0.9736047,
            "posZ": 10.0001507,
            "rotX": -2.134554E-05,
            "rotY": 179.997452,
            "rotZ": 4.590194E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "neuf"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 40,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "9584b6",
          "Name": "Card",
          "Transform": {
            "posX": 29.5,
            "posY": 0.973605,
            "posZ": 11.5,
            "rotX": 3.543627E-07,
            "rotY": 180.0,
            "rotZ": 1.7038758E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "valet"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 37,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "9568e3",
          "Name": "Card",
          "Transform": {
            "posX": 6.99999857,
            "posY": 1.129088,
            "posZ": 5.0,
            "rotX": -0.000118238364,
            "rotY": 180.0,
            "rotZ": -0.000640112034,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "roi"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 5,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "6d1678",
          "Name": "Card",
          "Transform": {
            "posX": 22.0,
            "posY": 0.973605,
            "posZ": -12.0,
            "rotX": -1.4508251E-07,
            "rotY": 180.0,
            "rotZ": 3.45724231E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "reine",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "reine"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 36,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "f5eb32",
          "Name": "Card",
          "Transform": {
            "posX": 34.5004234,
            "posY": 0.988142431,
            "posZ": -3.50002027,
            "rotX": -0.000140517164,
            "rotY": 179.999481,
            "rotZ": 0.7771425,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "cinq"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 14,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "4e56b6",
          "Name": "Card",
          "Transform": {
            "posX": 23.0007362,
            "posY": 0.973605037,
            "posZ": -7.999973,
            "rotX": 2.589101E-06,
            "rotY": 179.997253,
            "rotZ": 3.44010641E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "trois"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 21,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "70d1e3",
          "Name": "Card",
          "Transform": {
            "posX": 25.0,
            "posY": 0.973604739,
            "posZ": 14.0,
            "rotX": -2.987363E-08,
            "rotY": 180.0,
            "rotZ": -2.24401418E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "dix"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 39,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "ae7e0d",
          "Name": "Card",
          "Transform": {
            "posX": 19.0,
            "posY": 0.973604739,
            "posZ": 1.0,
            "rotX": -7.77836959E-08,
            "rotY": 180.0,
            "rotZ": -5.36469258E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "six"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 48,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "dd94be",
          "Name": "Card",
          "Transform": {
            "posX": 33.0,
            "posY": 0.973605,
            "posZ": 12.0,
            "rotX": -5.13813951E-08,
            "rotY": 180.0,
            "rotZ": -1.50223329E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "valet"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 2,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "082810",
          "Name": "Card",
          "Transform": {
            "posX": 25.5,
            "posY": 0.9736052,
            "posZ": -12.5,
            "rotX": 7.59797345E-08,
            "rotY": 180.0,
            "rotZ": -2.86383369E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "deux"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 24,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "c76d12",
          "Name": "Card",
          "Transform": {
            "posX": 18.5,
            "posY": 0.973605,
            "posZ": -13.5,
            "rotX": -3.27567555E-08,
            "rotY": 180.0,
            "rotZ": 4.68185732E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "reine",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "reine"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 1,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "dc8902",
          "Name": "Card",
          "Transform": {
            "posX": 8.999579,
            "posY": 0.988148153,
            "posZ": -3.99998045,
            "rotX": 0.000112624621,
            "rotY": 179.99971,
            "rotZ": 359.222534,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "as",
            "chiffre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "713110",
          "Name": "Card",
          "Transform": {
            "posX": 31.99974,
            "posY": 0.9878516,
            "posZ": -5.99999332,
            "rotX": -0.000115650728,
            "rotY": 180.002792,
            "rotZ": 359.238525,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "roi"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 35,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "a864b8",
          "Name": "Card",
          "Transform": {
            "posX": 19.99999,
            "posY": 0.97361654,
            "posZ": -12.0000114,
            "rotX": -0.000107758053,
            "rotY": 180.000122,
            "rotZ": 0.000701527053,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "deux"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 51,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "fd4900",
          "Name": "Card",
          "Transform": {
            "posX": 32.5000267,
            "posY": 0.9735834,
            "posZ": -3.49999857,
            "rotX": 0.000221503331,
            "rotY": 179.999344,
            "rotZ": -0.00138758693,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "cinq"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 19,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "f574de",
          "Name": "Card",
          "Transform": {
            "posX": 21.4999676,
            "posY": 0.9736173,
            "posZ": 5.4999814,
            "rotX": -0.000118777964,
            "rotY": 179.996353,
            "rotZ": 0.0006923603,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "huit"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 16,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "bfddda",
          "Name": "Card",
          "Transform": {
            "posX": 26.0004921,
            "posY": 0.9881449,
            "posZ": 4.999903,
            "rotX": -0.000211273058,
            "rotY": 180.0033,
            "rotZ": 0.7766257,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "huit"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 11,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "01b58c",
          "Name": "Card",
          "Transform": {
            "posX": 16.5,
            "posY": 0.973604739,
            "posZ": -3.5,
            "rotX": 1.14381615E-09,
            "rotY": 180.0,
            "rotZ": -3.717484E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "as",
            "chiffre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 38,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "f14a2e",
          "Name": "Card",
          "Transform": {
            "posX": 13.5,
            "posY": 0.973605,
            "posZ": -8.5,
            "rotX": 3.15035038E-08,
            "rotY": 180.0,
            "rotZ": -3.51581946E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "reine",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "figure",
            "reine"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 31,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "a7a52d",
          "Name": "Card",
          "Transform": {
            "posX": 28.0,
            "posY": 0.973604739,
            "posZ": -8.0,
            "rotX": -5.76438843E-08,
            "rotY": 180.0,
            "rotZ": -3.10046318E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "trois"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 50,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "cbf918",
          "Name": "Card",
          "Transform": {
            "posX": 30.0,
            "posY": 0.973604739,
            "posZ": -3.0,
            "rotX": 5.305668E-08,
            "rotY": 180.0,
            "rotZ": -2.97714479E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "cinq"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 44,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "922e0d",
          "Name": "Card",
          "Transform": {
            "posX": 35.00028,
            "posY": 0.988145232,
            "posZ": 3.99996543,
            "rotX": -0.000105898085,
            "rotY": 180.001648,
            "rotZ": 0.7772029,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "sept"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 42,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "29d25a",
          "Name": "Card",
          "Transform": {
            "posX": 25.0001488,
            "posY": 1.03760767,
            "posZ": -3.99999928,
            "rotX": 0.0001344334,
            "rotY": 180.001022,
            "rotZ": 0.7774882,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "quatre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 20,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "9f0dec",
          "Name": "Card",
          "Transform": {
            "posX": 38.0,
            "posY": 0.9736053,
            "posZ": 4.0,
            "rotX": -1.57741226E-07,
            "rotY": 180.0,
            "rotZ": -5.476486E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "sept"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 17,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "a08b04",
          "Name": "Card",
          "Transform": {
            "posX": 19.9999981,
            "posY": 0.973583,
            "posZ": -4.000145,
            "rotX": 0.000206662677,
            "rotY": 180.001572,
            "rotZ": -0.00147650042,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "quatre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 27,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "96b1fb",
          "Name": "Card",
          "Transform": {
            "posX": 33.00004,
            "posY": 0.973583639,
            "posZ": 4.00000858,
            "rotX": 0.000216651912,
            "rotY": 179.999863,
            "rotZ": -0.00136145577,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "sept"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 47,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "bb4f0b",
          "Name": "Card",
          "Transform": {
            "posX": 13.5,
            "posY": 0.9736053,
            "posZ": -3.5,
            "rotX": 9.300105E-08,
            "rotY": 180.0,
            "rotZ": -7.852872E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "as",
            "chiffre"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 8,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "ff7b98",
          "Name": "Card",
          "Transform": {
            "posX": 33.0003128,
            "posY": 0.9881462,
            "posZ": 13.9999723,
            "rotX": -0.000139070675,
            "rotY": 179.999969,
            "rotZ": 0.777167737,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "dix"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 34,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "d975d1",
          "Name": "Card",
          "Transform": {
            "posX": 27.4999943,
            "posY": 0.9736046,
            "posZ": -2.500006,
            "rotX": 1.65855067E-06,
            "rotY": 180.0005,
            "rotZ": -3.85629937E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "cinq"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 26,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "62e9e4",
          "Name": "Card",
          "Transform": {
            "posX": 24.0001163,
            "posY": 0.973579049,
            "posZ": 5.00003767,
            "rotX": 0.000293775782,
            "rotY": 179.997681,
            "rotZ": -0.00140776078,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "huit"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 41,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "5ba7a4",
          "Name": "Card",
          "Transform": {
            "posX": 28.5,
            "posY": 0.973604739,
            "posZ": 13.5,
            "rotX": -4.752324E-08,
            "rotY": 180.0,
            "rotZ": -3.34337329E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "dix"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 4,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "c0d3ac",
          "Name": "Card",
          "Transform": {
            "posX": 41.0,
            "posY": 0.9736052,
            "posZ": 4.0,
            "rotX": -4.4656332E-08,
            "rotY": 180.0,
            "rotZ": -3.32505465E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "sept"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 12,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "063acf",
          "Name": "Card",
          "Transform": {
            "posX": 28.5,
            "posY": 0.973604739,
            "posZ": 9.5,
            "rotX": -6.88366839E-08,
            "rotY": 180.0,
            "rotZ": -3.31356148E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "neuf"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 10,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "ea0682",
          "Name": "Card",
          "Transform": {
            "posX": 25.4999943,
            "posY": 0.9736003,
            "posZ": -7.500001,
            "rotX": 4.84211851E-05,
            "rotY": 180.000137,
            "rotZ": -0.000336399622,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "trois"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 23,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "fcdda1",
          "Name": "Card",
          "Transform": {
            "posX": 24.5,
            "posY": 0.9736048,
            "posZ": 1.5,
            "rotX": -1.400227E-07,
            "rotY": 180.0,
            "rotZ": -4.61502765E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "six"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 18,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "15d64f",
          "Name": "Card",
          "Transform": {
            "posX": 27.5,
            "posY": 0.973604739,
            "posZ": 1.5,
            "rotX": -4.14653165E-08,
            "rotY": 180.0,
            "rotZ": -1.59862878E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "chiffre",
            "six"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 13,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "0926c8",
      "Name": "backgammon_piece_white",
      "Transform": {
        "posX": -4.509103,
        "posY": 1.07525122,
        "posZ": -1.51,
        "rotX": 1.49883135E-06,
        "rotY": 0.0002393412,
        "rotZ": -1.2140016E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.735294163,
        "g": 0.735294163,
        "b": 0.735294163
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1fb029",
      "Name": "backgammon_piece_white",
      "Transform": {
        "posX": -12.1213856,
        "posY": 1.07525122,
        "posZ": -1.51,
        "rotX": 7.00851558E-07,
        "rotY": 6.135068E-07,
        "rotZ": -9.61479E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.735294163,
        "g": 0.735294163,
        "b": 0.735294163
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "afa021",
      "Name": "BlockRectangle",
      "Transform": {
        "posX": 13.0,
        "posY": 1.46,
        "posZ": 14.0,
        "rotX": -2.99988244E-07,
        "rotY": 180.0,
        "rotZ": -1.595778E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.0,
        "g": 0.201567829,
        "b": 0.8235294
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "939c55",
      "Name": "BlockSquare",
      "Transform": {
        "posX": 16.0,
        "posY": 1.46,
        "posZ": 13.0,
        "rotX": 4.024379E-08,
        "rotY": 180.0,
        "rotZ": 5.239161E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.9264706,
        "g": 0.0,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b7d20b",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -51.6596222,
        "posY": 3.29337835,
        "posZ": -11.7324,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 15.1940193,
        "scaleY": 11.8970528,
        "scaleZ": 6.40568066
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "9fb637",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 51.64263,
        "posY": 3.29337835,
        "posZ": -11.7324,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 15.1940022,
        "scaleY": 11.8970528,
        "scaleZ": 6.40568066
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5d8bee",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -23.670002,
        "posY": 3.29337835,
        "posZ": -34.42515,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 15.3268938,
        "scaleY": 11.8970528,
        "scaleZ": 6.35014534
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "846b6f",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 23.670002,
        "posY": 3.29337835,
        "posZ": -34.2558136,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 15.3268747,
        "scaleY": 11.8970547,
        "scaleZ": 6.705048
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5eaba1",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -24.5820179,
        "posY": 3.51113486,
        "posZ": -26.3665028,
        "rotX": 0.0,
        "rotY": 359.6668,
        "rotZ": 0.0,
        "scaleX": 17.6346951,
        "scaleY": 5.1,
        "scaleZ": 8.108635
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "545c2b",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -40.8391953,
        "posY": 3.515223,
        "posZ": -11.8590393,
        "rotX": 0.0,
        "rotY": 359.6668,
        "rotZ": 0.0,
        "scaleX": 8.394397,
        "scaleY": 5.1,
        "scaleZ": 16.04327
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3ea23c",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 23.9722633,
        "posY": 3.51113486,
        "posZ": -24.9248924,
        "rotX": 0.0,
        "rotY": 359.6668,
        "rotZ": 0.0,
        "scaleX": 19.4337254,
        "scaleY": 5.1,
        "scaleZ": 9.262689
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1580ff",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 43.544754,
        "posY": 3.51113486,
        "posZ": -11.1370153,
        "rotX": 0.0,
        "rotY": 359.6668,
        "rotZ": 0.0,
        "scaleX": 7.73183632,
        "scaleY": 5.1,
        "scaleZ": 18.8922234
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "cf92d0",
      "Name": "BlockSquare",
      "Transform": {
        "posX": -26.0,
        "posY": 1.06082773,
        "posZ": -24.0000076,
        "rotX": 0.01003697,
        "rotY": -0.000363302825,
        "rotZ": -0.000436484523,
        "scaleX": 12.0,
        "scaleY": 0.2,
        "scaleZ": 8.0
      },
      "Nickname": "plateau joueur",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.608013868,
        "g": 0.608013868,
        "b": 0.608013868
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7e7c76",
      "Name": "BlockSquare",
      "Transform": {
        "posX": -38.99997,
        "posY": 1.06000006,
        "posZ": -11.9997959,
        "rotX": -5.375728E-08,
        "rotY": 89.97245,
        "rotZ": -1.19202774E-07,
        "scaleX": 12.0,
        "scaleY": 0.2,
        "scaleZ": 8.0
      },
      "Nickname": "plateau joueur",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.608013868,
        "g": 0.608013868,
        "b": 0.608013868
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "0b45fb",
      "Name": "BlockSquare",
      "Transform": {
        "posX": 22.0075,
        "posY": 1.060862,
        "posZ": -25.0121613,
        "rotX": 0.0127600916,
        "rotY": 0.009851847,
        "rotZ": -0.0002803347,
        "scaleX": 12.0,
        "scaleY": 0.2,
        "scaleZ": 8.0
      },
      "Nickname": "plateau joueur",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.608013868,
        "g": 0.608013868,
        "b": 0.608013868
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "cf3885",
      "Name": "BlockSquare",
      "Transform": {
        "posX": 44.00001,
        "posY": 1.06112027,
        "posZ": -12.9999914,
        "rotX": 0.00282959337,
        "rotY": 270.0205,
        "rotZ": -0.00109411357,
        "scaleX": 12.0,
        "scaleY": 0.2,
        "scaleZ": 8.0
      },
      "Nickname": "plateau joueur",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.608013868,
        "g": 0.608013868,
        "b": 0.608013868
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "691ada",
      "Name": "PlayerPawn",
      "Transform": {
        "posX": 45.81506,
        "posY": 0.96305126,
        "posZ": -19.3699455,
        "rotX": -2.62350636E-06,
        "rotY": 91.55808,
        "rotZ": -9.743393E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.838235259,
        "g": 0.0,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "ab5d89",
      "Name": "PlayerPawn",
      "Transform": {
        "posX": -41.01276,
        "posY": 0.9618335,
        "posZ": -5.13817358,
        "rotX": -7.257453E-06,
        "rotY": 89.99844,
        "rotZ": 2.02464639E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.117999293,
        "g": 0.53,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 3,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "6c63db",
      "Name": "PlayerPawn",
      "Transform": {
        "posX": -33.2064133,
        "posY": 0.9618323,
        "posZ": -24.3039951,
        "rotX": -1.5951111E-05,
        "rotY": 89.99905,
        "rotZ": 1.8584243E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.0,
        "g": 0.6985294,
        "b": 0.00481740525
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 4,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "091253",
      "Name": "PlayerPawn",
      "Transform": {
        "posX": 15.5458384,
        "posY": 0.962492049,
        "posZ": -25.7479153,
        "rotX": -0.00124486873,
        "rotY": 90.00674,
        "rotZ": 0.1518288,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.8602941,
        "g": 0.8602941,
        "b": 0.8602941
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 0,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "acc4c5",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -8.237516,
        "posY": 3.51113486,
        "posZ": 7.58155632,
        "rotX": 0.0,
        "rotY": 359.6668,
        "rotZ": 0.0,
        "scaleX": 24.62066,
        "scaleY": 5.1,
        "scaleZ": 11.8147573
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "2916ae",
      "Name": "Bag",
      "Transform": {
        "posX": -46.0,
        "posY": 0.7801889,
        "posZ": 34.0,
        "rotX": -1.33401645E-08,
        "rotY": 0.00015187166,
        "rotZ": -3.66856057E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Outils TTS",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.4389993,
        "b": 0.807
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Bag": {
        "Order": 0
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "3e069c",
          "Name": "BlockSquare",
          "Transform": {
            "posX": 62.0548935,
            "posY": 1.32113659,
            "posZ": -14.2363,
            "rotX": 4.51164453E-11,
            "rotY": 0.02383045,
            "rotZ": -2.16947825E-07,
            "scaleX": 10.0,
            "scaleY": 0.2,
            "scaleZ": 10.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.137254268,
            "g": 0.137254268,
            "b": 0.137254268
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "-----[ACME] Automatic resource couting on 1 tile------------------------------------------------------------------\r\n-- copy this code in a flat squared object (tile, token...)\r\n-- only set the parameters in onLoad() and it's all good\r\n-- if you want to use .GMNotes instead of .name, just replace all getName() occurences by getGMNotes() \r\n\r\ngame_data = {\r\n}\r\n\r\nfunction onSave()\r\n    game_data.zone_capture_guid = zone_capture.guid\r\n    saved_data = JSON.encode(game_data)\r\n    return saved_data\r\nend\r\n\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" then\r\n        game_data = JSON.decode(saved_data)\r\n    end\r\n\r\n    -------------------------------------------------------------------------------------------------\r\n    -- COUNTING TILE PARAMETERS (PUT THIS AT THE END OF ONLOAD)\r\n    -------------------------------------------------------------------------------------------------\r\n    counting_tile_params = {\r\n        label_position = {0, 1, 0.4},\r\n        font_size = 600,\r\n        label_spacing = 0.2,                -- vertical spacing between 2 labels\r\n        turn_180 = false                    -- wheter turns or not label position and rotation 180° vertically\r\n    }\r\n    table_resources = {\r\n        {name = 'white', color = 'White', tooltip = \"White tokens\"},\r\n        {name = 'blue', color = 'Blue', tooltip = \"\"}\r\n    }\r\n    activateCountingTile()\r\n    -------------------------------------------------------------------------------\r\nend\r\n\r\n-------------------------------------------------------------------------------------------------\r\n-- COUNTING TILE FUNCTIONS \r\n-------------------------------------------------------------------------------------------------\r\nfunction activateCountingTile()\r\n    destructOldZone()\r\n    table_names = {}\r\n    local position = Vector(counting_tile_params.label_position)\r\n    local rotation = {0, 180, 0}\r\n    if counting_tile_params.turn_180 then \r\n        rotation = {0, 0, 0}\r\n        counting_tile_params.label_spacing = - counting_tile_params.label_spacing\r\n    end\r\n    for _, resource in ipairs(table_resources) do\r\n        local space = \"\"\r\n        if resource.tooltip ~= \"\" then space = \" : \" end\r\n        self.createButton({\r\n            click_function='doNothing',\r\n            function_owner=Global,\r\n            label = resource.tooltip .. space ..'0',\r\n            font_color = resource.color,\r\n            position = position,\r\n            rotation = rotation,\r\n            height=0,\r\n            width=0,\r\n            scale = {0.1,0.1,0.1},\r\n            font_size = counting_tile_params.font_size\r\n        })\r\n        table.insert(table_names, resource.name)\r\n        position.z = position.z - counting_tile_params.label_spacing\r\n    end\r\n    spawnZoneCapture()\r\nend\r\n\r\n-- destroy zone_capture from previous save\r\nfunction destructOldZone()\r\n    if getObjectFromGUID(game_data.zone_capture_guid) then\r\n        getObjectFromGUID(game_data.zone_capture_guid).destruct()\r\n    end\r\nend\r\n\r\nfunction spawnZoneCapture()\r\n    zone_capture = spawnObject({\r\n        type              = \"ScriptingTrigger\", -- zone de script\r\n        position          = self.getPosition() + Vector({0, 0.5, 0}),\r\n        rotation          = self.getRotation(),\r\n        scale             = self.getBounds().size:scale(Vector({0.95, 0, 0.95}))+Vector({0, 3, 0}),\r\n    })\r\nend\r\n\r\nfunction doNothing()\r\nend\r\n\r\nfunction CountResources(name)\r\n    local zoneObjects = zone_capture.getObjects()\r\n    for _, resource_name in ipairs(table_names) do\r\n        local varname = \"nb_\" .. tostring(resource_name)\r\n        _G[varname] = 0\r\n    end\r\n    for _, object in ipairs(zoneObjects) do\r\n        matching_thing = tryMatchingThing(table_names, object)\r\n        if matching_thing then\r\n            local varname = \"nb_\" .. tostring(matching_thing)\r\n            _G[varname] = _G[varname] + 1\r\n        end\r\n    end\r\n    for i, resource in ipairs(table_resources) do\r\n        local space = \"\"\r\n        if resource.tooltip ~= \"\" then space = \" : \" end\r\n        self.editButton({ index = i-1, label = resource.tooltip .. space .. _G[\"nb_\" .. tostring(resource.name)] })\r\n    end\r\nend\r\n\r\n--check if at least one value is found in two tables\r\nfunction atLeastOneMatch(table1, table2)\r\n    if table1 and table2 then\r\n        for _, value in ipairs(table1) do\r\n            if hasValue(table2, value) then\r\n                return value\r\n            end\r\n        end\r\n        return false\r\n    end\r\nend\r\n\r\n--check if at least one object's attribute is found a table\r\nfunction tryMatchingThing(table, object)\r\n    if hasValue(table, object.getName()) then\r\n        return object.getName()\r\n    elseif hasValue(table, object.getGMNotes()) then\r\n        return object.getGMNotes()\r\n    elseif atLeastOneMatch(table, object.getTags()) then\r\n        return atLeastOneMatch(table, object.getTags())\r\n    else\r\n        return nil\r\n    end\r\nend\r\n\r\n--check if at least one value is found a table\r\nfunction hasValue (tab, val)\r\n    if tab and val then\r\n        for index, value in ipairs(tab) do\r\n            if value == val then\r\n                return index\r\n            end\r\n        end\r\n        return false\r\n    end\r\nend\r\n\r\n\r\nfunction onObjectEnterScriptingZone(zone, enter_object)\r\n    if zone.guid == zone_capture.guid then\r\n        -- print(object.getName(), object.getGMNotes(), object.getTags())\r\n        matching_thing = tryMatchingThing(table_names, enter_object)\r\n        if matching_thing then\r\n            CountResources(matching_thing)\r\n        end\r\n    end\r\nend\r\n\r\nfunction onObjectLeaveScriptingZone(zone, enter_object)\r\n    if zone.guid == zone_capture.guid then\r\n        matching_thing = tryMatchingThing(table_names, enter_object)\r\n        if matching_thing then\r\n            CountResources(matching_thing)\r\n        end\r\n    end\r\nend\r\n\r\nfunction onPickUp()\r\n    -- zone_capture.destruct()\r\n    if getObjectFromGUID(zone_capture.guid) then\r\n        getObjectFromGUID(zone_capture.guid).destruct()\r\n    end\r\nend\r\n\r\nfunction onDrop()\r\n    spawnZoneCapture()\r\nend\r\n\r\nfunction onDestroy()\r\n    zone_capture.destruct()\r\nend\r\n\r\n-- [Author ?] print deep content of a table (like PHP print_r method)\r\nfunction print_r (t, indent, done)\r\n    done = done or {}\r\n    indent = indent or ' '\r\n    local nextIndent -- Storage for next indentation value\r\n    for key, value in pairs (t) do\r\n    if type (value) == \"table\" and not done [value] then\r\n        nextIndent = nextIndent or\r\n            (indent .. string.rep(' ',string.len(tostring (key))+2))\r\n            -- Shortcut conditional allocation\r\n        done [value] = true\r\n        print (indent .. \"[\" .. tostring (key) .. \"] => Table {\");\r\n        print  (nextIndent .. \"{\");\r\n        print_r (value, nextIndent .. string.rep(' ',2), done)\r\n        print  (nextIndent .. \"}\");\r\n    else\r\n        print  (indent .. \"[\" .. tostring (key) .. \"] => \" .. tostring (value)..\"\")\r\n    end\r\n    end\r\nend",
          "LuaScriptState": "{\"zone_capture_guid\":\"4a7022\"}",
          "XmlUI": ""
        },
        {
          "GUID": "8ef8ef",
          "Name": "BlockSquare",
          "Transform": {
            "posX": 34.2285728,
            "posY": 1.42113483,
            "posZ": -10.0413933,
            "rotX": -1.10818462E-07,
            "rotY": 180.000351,
            "rotZ": -1.35244136E-07,
            "scaleX": 8.0,
            "scaleY": 0.4,
            "scaleZ": 8.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.4128906,
            "g": 0.4128906,
            "b": 0.4128906
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "\r\ntextures = {\r\n    [\"Bordeaux\"] = \"http://cloud-3.steamusercontent.com/ugc/929303176024812025/1CE2F3281C910B3E836B1B9ECD2814A5AD699835/\",\r\n    [\"Beige\"] = \"http://cloud-3.steamusercontent.com/ugc/1764817203190458591/2E433E958A11CCE504EBF465434473DA4CBC7E17/\",\r\n    [\"Blanc\"] = \"http://cloud-3.steamusercontent.com/ugc/1764817203190460046/AB7AEC6E720F344C124BC8F1C8E621E321A95CBA/\",\r\n    [\"Cuir_gris\"] = \"http://cloud-3.steamusercontent.com/ugc/1630856022857574274/FBEAFC2D513EF4F6253F42FFF06DE5926DB2CEC0/\",\r\n    [\"Violet\"] = \"http://cloud-3.steamusercontent.com/ugc/1764817203190466598/2E4C89924D5DB23C067C2BBEEA065001A880CDA1/\",\r\n    [\"Bois\"] = \"http://cloud-3.steamusercontent.com/ugc/1764817203190473060/CF961AA6F7D0477FA178DB6717760E0D16C5E6B4/\"\r\n}\r\n\r\nfunction onload()\r\n    local shift = 0.25\r\n    local positionZ = - (tableLength(textures)/2) * shift\r\n    for color, infos in pairs(textures) do\r\n        self.createButton({\r\n            label=color, click_function=color, function_owner=self,\r\n            position={0,0.7,positionZ}, width=480, height=140, font_size=100\r\n        })\r\n        positionZ = positionZ + shift\r\n    end\r\nend\r\n\r\nfunction tableLength(T)\r\n    local count = 0\r\n    for _ in pairs(T) do count = count + 1 end\r\n    return count\r\nend\r\n\r\nfunction Bordeaux()\r\n    Tables.setCustomURL(textures['Bordeaux'])\r\nend\r\n\r\nfunction Beige()\r\n    Tables.setCustomURL(textures['Beige'])\r\nend\r\n\r\nfunction Blanc()\r\n    Tables.setCustomURL(textures['Blanc'])\r\nend\r\n\r\nfunction Cuir_gris()\r\n    Tables.setCustomURL(textures['Cuir_gris'])\r\nend\r\n\r\nfunction Violet()\r\n    Tables.setCustomURL(textures['Violet'])\r\nend\r\n\r\nfunction Bois()\r\n    Tables.setCustomURL(textures['Bois'])\r\nend",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "623f75",
          "Name": "Custom_Assetbundle",
          "Transform": {
            "posX": 34.1855736,
            "posY": 2.22613525,
            "posZ": -12.3395929,
            "rotX": -1.70831208E-06,
            "rotY": 179.995316,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomAssetbundle": {
            "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/876374721190277400/02AEB874991484941EF0ECCDE9484A7FECCE06EA/",
            "AssetbundleSecondaryURL": "",
            "MaterialIndex": 0,
            "TypeIndex": 0,
            "LoopingEffectIndex": 0
          },
          "LuaScript": "--Announces when time runs out with a broadcast/chat message. (true or false)\r\nannounceToggle = false\r\n\r\n--The colors the tool is, if fadeout mode is on (in r,g,b format, 0-1)\r\nfadeoutColor_start = {1, 1, 1}\r\nfadeoutColor_end = {0.1, 0.1, 0.1}\r\n\r\n\r\n--Runs whenever game is saved/autosaved\r\nfunction onSave()\r\n    local data_to_save = {\r\n        cr=countdownRemaining,\r\n        cg=countdownGoal,\r\n        rof=resetOnFlip,\r\n        pc=pauseCountdown,\r\n        ft=fadeToggle,\r\n    }\r\n    saved_data = JSON.encode(data_to_save)\r\n    --saved_data = \"\" --Remove -- at start + save to clear save data\r\n    return saved_data\r\nend\r\n\r\n--Runs when game is loaded\r\nfunction onLoad(saved_data)\r\n    --Loads the tracking for if the game has started yet\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        countdownRemaining = loaded_data.cr\r\n        countdownGoal = loaded_data.cg\r\n        resetOnFlip = loaded_data.rof\r\n        pauseCountdown = loaded_data.pc\r\n        fadeToggle = loaded_data.ft\r\n    else\r\n        countdownGoal = 10\r\n        countdownRemaining = countdownGoal\r\n        resetOnFlip = true\r\n        pauseCountdown = false\r\n        fadeToggle = true\r\n    end\r\n\r\n    --Establish color offset, how much needs to be added to fadeoutColor_start\r\n    fadeoutColor_offset = {\r\n        fadeoutColor_start[1]-fadeoutColor_end[1],\r\n        fadeoutColor_start[2]-fadeoutColor_end[2],\r\n        fadeoutColor_start[3]-fadeoutColor_end[3],\r\n    }\r\n\r\n    --Tracks if tool was upright based on its current memory\r\n    currentlyUp = true\r\n    if upsideDown() then currentlyUp = false end\r\n\r\n    createDisplayButtons()\r\n    createFunctionButtons()\r\n    createTimeInputs()\r\nend\r\n\r\n\r\n\r\n--Countdown Handling\r\n\r\n\r\n\r\n--Start Countdown\r\nfunction onCollisionEnter(collision_info)\r\n    function onCollisionEnter_routine()\r\n        --Avoids an error on startup\r\n        if currentlyUp == nil then return end\r\n        --Check if the tool's rotation match's its current memory of what it was\r\n        if upsideDown() and currentlyUp or not upsideDown() and not currentlyUp then\r\n            --Toggle which way is \"up\" for the current status\r\n            currentlyUp = not currentlyUp\r\n            --Kill any currently running coroutine and wait for it to be exectued\r\n            if countdownRunning then\r\n                killCountdown = true\r\n                while killCountdown do\r\n                    coroutine.yield(0)\r\n                end\r\n            end\r\n            --Determine countdown amount based off of countdown mode\r\n            if resetOnFlip then\r\n                countdownRemaining = countdownGoal\r\n            else\r\n                countdownRemaining = countdownGoal - countdownRemaining\r\n                if countdownRemaining == 0 then\r\n                    countdownRemaining = countdownGoal\r\n                end\r\n            end\r\n\r\n            --Initate countdown\r\n            startLuaCoroutine(self, \"countdown_routine\")\r\n        end\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"onCollisionEnter_routine\")\r\nend\r\n\r\n--Runs countdown\r\nfunction countdown_routine()\r\n    countdownRunning = true\r\n    local startTime = os.time()\r\n    rotateDisplayButtons()\r\n    while countdownRemaining > 0 do\r\n        --Perform countdown step for this frame of the game\r\n        local timeDelta = os.time() - startTime\r\n        countdownRemaining = countdownRemaining - timeDelta\r\n        updateDisplayButtons()\r\n        startTime = os.time()\r\n        --Perform color change step\r\n        if fadeToggle then\r\n            --fadeoutColor_start\r\n            --fadeoutColor_end\r\n            percentLeft = countdownRemaining / countdownGoal\r\n            local r = fadeoutColor_end[1] + (fadeoutColor_offset[1] * percentLeft)\r\n            local g = fadeoutColor_end[2] + (fadeoutColor_offset[2] * percentLeft)\r\n            local b = fadeoutColor_end[3] + (fadeoutColor_offset[3] * percentLeft)\r\n            self.setColorTint({r,g,b})\r\n        end\r\n\r\n        coroutine.yield(0)\r\n\r\n        --Stall routine until pause is removed or it is killed\r\n        while pauseCountdown do\r\n            startTime = os.time()\r\n            coroutine.yield(0)\r\n            if killCountdown then break end\r\n        end\r\n        --Kills coroutine on-demand\r\n        if killCountdown then\r\n            killCountdown = nil\r\n            countdownRunning = false\r\n            return 1\r\n        end\r\n    end\r\n\r\n    if announceToggle then broadcastToAll(\"Time's Up!\", {1,1,1}) end\r\n    self.AssetBundle.playTriggerEffect(0)\r\n    countdownRunning = false\r\n    return 1\r\nend\r\n\r\n--Reset and Pause\r\n\r\n\r\n\r\n--Pauses countdown (countdown cannot continute until reset or unpaused)\r\nfunction click_pause()\r\n    pauseCountdown = not pauseCountdown\r\n    pauseCountdownToggle()\r\nend\r\n\r\n--Resets tool\r\nfunction click_reset()\r\n    if countdownRunning then\r\n        killCountdown = true\r\n    end\r\n    pauseCountdown = false\r\n    pauseCountdownToggle()\r\n    countdownRemaining = countdownGoal\r\n    updateDisplayButtons()\r\nend\r\n\r\nfunction pauseCountdownToggle()\r\n    if pauseCountdown then\r\n        for i=0,3 do\r\n            self.editButton({index=i, font_color={0.5,0.5,0.5}})\r\n        end\r\n    else\r\n        for i=0,3 do\r\n            self.editButton({index=i, font_color={1,1,1}})\r\n        end\r\n    end\r\nend\r\n\r\n\r\n\r\n\r\n\r\n--Settings buttons/inputs\r\n\r\n\r\n\r\n--toggles between hourglass mode and reset mode\r\nfunction click_toggleMode()\r\n    resetOnFlip = not resetOnFlip\r\n\r\n    --Mode toggle (hourglass or reset on flip)\r\n    local label = string.char(8987)\r\n    local tooltip = \"[b]Hourglass Mode:[/b] Flipping timer over will 'reverse' the countdown.\"\r\n    if resetOnFlip then\r\n        label = string.char(8630)\r\n        tooltip = \"[b]Reset Mode:[/b] Flipping timer over will restart the countdown.\"\r\n    end\r\n    self.editButton({index=8, label=label, tooltip=tooltip})\r\n    self.editButton({index=9, label=label, tooltip=tooltip})\r\nend\r\n\r\n--Toggles between announcing or not\r\nfunction click_fadeToggle()\r\n    fadeToggle = not fadeToggle\r\n\r\n    --Update buttons\r\n    local label = string.char(9788)\r\n    local tooltip = \"[b]Fadeout Mode Disabled[/b]\\nThe color of the timer will not change.\"\r\n    if fadeToggle then\r\n        label = string.char(9790)\r\n        tooltip = \"[b]Fadeout Mode Enabled[/b]\\nThe color of the timer will fade during countdown.\"\r\n    end\r\n    self.editButton({index=10, label=label, tooltip=tooltip})\r\n    self.editButton({index=11, label=label, tooltip=tooltip})\r\nend\r\n\r\n--Handles inputting of new time\r\nfunction input_time(_, color, inputString, stillEditing)\r\n    if not stillEditing then\r\n        local inputNum = tonumber(inputString)\r\n        if type(inputNum) == \"number\" and inputNum ~= countdownGoal then\r\n            countdownGoal = inputNum\r\n            click_reset()\r\n            printToAll(Player[color].steam_name .. \" has updated the digital hourglass's time to \"..countdownGoal..\" seconds.\", stringColorToRGB(color))\r\n        else\r\n            --Here in case I decide I want to broadcast an error for a blank timer\r\n        end\r\n        self.clearInputs()\r\n        createTimeInputs()\r\n    end\r\nend\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--Information finding and formatting\r\n\r\n\r\n\r\n--Determines if this object is upside down (using rotation values)\r\nfunction upsideDown()\r\n    if self.getRotationValue() == \"Digital Hourglass \" then\r\n        return true\r\n    else\r\n        return false\r\n    end\r\nend\r\n\r\n--Formats seconds into readable time format\r\nfunction formatSecondsForCountdown(seconds)\r\n    local seconds = math.ceil(seconds)\r\n    local hours = math.floor(seconds / 3600)\r\n    local minutes = math.floor((seconds / 60) % 60)\r\n    local seconds = seconds % 60\r\n\r\n    s = \"\"\r\n    if hours > 0 then\r\n        minutes = string.format(\"%02d\", minutes)\r\n        seconds = string.format(\"%02d\", seconds)\r\n        s = hours .. \":\" .. minutes .. \":\" .. seconds\r\n    else\r\n        seconds = string.format(\"%02d\", seconds)\r\n        s = minutes .. \":\" .. seconds\r\n    end\r\n\r\n    return s\r\nend\r\n\r\n-- Get real string lenght per char table\r\nfunction getStringUnitWidth(str)\r\n    local len = 0\r\n    for i = 1, #str do\r\n        local c = str:sub(i,i)\r\n        if ref_charUnitWidth[c] then\r\n            len = len + ref_charUnitWidth[c]\r\n        else\r\n            len = len + ref_charUnitWidth.avg\r\n        end\r\n    end\r\n    return len\r\nend\r\n\r\n\r\n\r\n--Button creation\r\n\r\n\r\n\r\n--Places the time numbers on the 4 faces\r\nfunction createDisplayButtons()\r\n    --Format time for display\r\n    local cd_format = formatSecondsForCountdown(countdownRemaining)\r\n\r\n    --Adjust font size if needed\r\n    local font_size = 300\r\n    if getStringUnitWidth(cd_format) > 10000 then font_size = 200 end\r\n\r\n    --Adjust font color if needed\r\n    local font_color = {1,1,1}\r\n    if pauseCountdown then font_color = {0.5,0.5,0.5} end\r\n\r\n    --Adjust rotation for if it is flipped or not\r\n    local rot_offset = 0\r\n    if upsideDown() then rot_offset = 180 end\r\n\r\n    --Create 4 faces\r\n    self.createButton({\r\n        label=cd_format, click_function=\"n/a\", function_owner=self,\r\n        position={0,0,0.85}, height=0, width=0, font_size=font_size,\r\n        font_color=font_color, rotation=ref_faceRotation[upsideDown()][1]\r\n    })\r\n    self.createButton({\r\n        label=cd_format, click_function=\"n/a\", function_owner=self,\r\n        position={0,0,-0.85}, height=0, width=0, font_size=font_size,\r\n        font_color=font_color, rotation=ref_faceRotation[upsideDown()][2]\r\n    })\r\n    self.createButton({\r\n        label=cd_format, click_function=\"n/a\", function_owner=self,\r\n        position={-0.85,0,0}, height=0, width=0, font_size=font_size,\r\n        font_color=font_color, rotation=ref_faceRotation[upsideDown()][3]\r\n    })\r\n    self.createButton({\r\n        label=cd_format, click_function=\"n/a\", function_owner=self,\r\n        position={0.85,0,0}, height=0, width=0, font_size=font_size,\r\n        font_color=font_color, rotation=ref_faceRotation[upsideDown()][4]\r\n    })\r\nend\r\n\r\n\r\n\r\nfunction updateDisplayButtons()\r\n    --Format time for display\r\n    local cd_format = formatSecondsForCountdown(countdownRemaining)\r\n    local currentButtonData = self.getButtons()[1]\r\n    local cd_old = currentButtonData.label\r\n\r\n    if cd_format ~= cd_old then\r\n        --Adjust font size if needed\r\n        local font_size = 300\r\n        if getStringUnitWidth(cd_format) > 10000 then font_size = 200 end\r\n\r\n        --Edit 4 faces\r\n        for i=0, 3 do\r\n            self.editButton({\r\n                index=i,\r\n                label=cd_format,\r\n                font_size=font_size,\r\n                --rotation=ref_faceRotation[upsideDown()][i+1]\r\n            })\r\n        end\r\n    end\r\nend\r\n\r\nfunction rotateDisplayButtons()\r\n    for i=0, 3 do\r\n        self.editButton({\r\n            index=i,\r\n            rotation=ref_faceRotation[upsideDown()][i+1]\r\n        })\r\n    end\r\nend\r\n\r\nfunction createFunctionButtons()\r\n    --Pause\r\n    self.createButton({\r\n        label=\"PAUSE\", click_function=\"click_pause\", function_owner=self,\r\n        position={0,1,-0.42}, rotation={0,0,0}, height=500, width=740,\r\n        font_size=200, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1}\r\n    })\r\n    self.createButton({\r\n        label=\"PAUSE\", click_function=\"click_pause\", function_owner=self,\r\n        position={0,-1,-0.42}, rotation={180,180,0}, height=500, width=740,\r\n        font_size=200, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1}\r\n    })\r\n\r\n    --Reset\r\n    self.createButton({\r\n        label=\"RESET\", click_function=\"click_reset\", function_owner=self,\r\n        position={0,1,0.3}, rotation={0,0,0}, height=200, width=740,\r\n        font_size=140, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1}\r\n    })\r\n    self.createButton({\r\n        label=\"RESET\", click_function=\"click_reset\", function_owner=self,\r\n        position={0,-1,0.3}, rotation={180,180,0}, height=200, width=740,\r\n        font_size=140, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1}\r\n    })\r\n\r\n    --Mode toggle (hourglass or reset on flip)\r\n    local label = string.char(8987)\r\n    local tooltip = \"[b]Hourglass Mode:[/b] Flipping timer over will 'reverse' the countdown.\"\r\n    if resetOnFlip then\r\n        label = string.char(8630)\r\n        tooltip = \"[b]Reset Mode:[/b] Flipping timer over will restart the countdown.\"\r\n    end\r\n    self.createButton({\r\n        label=label, click_function=\"click_toggleMode\", function_owner=self,\r\n        position={-0.5,1,0.72}, rotation={0,0,0}, height=160, width=160,\r\n        font_size=140, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1},\r\n        tooltip=tooltip\r\n    })\r\n    self.createButton({\r\n        label=label, click_function=\"click_toggleMode\", function_owner=self,\r\n        position={0.5,-1,0.72}, rotation={180,180,0}, height=160, width=160,\r\n        font_size=140, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1},\r\n        tooltip=tooltip\r\n    })\r\n\r\n    --Announce toggle (broadcast or not broadcast when finished)\r\n    local label = string.char(9788)\r\n    local tooltip = \"[b]Fadeout Mode Disabled[/b]\\nThe color of the timer will not change.\"\r\n    if fadeToggle then\r\n        label = string.char(9790)\r\n        tooltip = \"[b]Fadeout Mode Enabled[/b]\\nThe color of the timer will fade during countdown.\"\r\n    end\r\n    self.createButton({\r\n        label=label, click_function=\"click_fadeToggle\", function_owner=self,\r\n        position={0.5,1,0.72}, rotation={0,0,0}, height=160, width=160,\r\n        font_size=110, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1},\r\n        tooltip=tooltip\r\n    })\r\n    self.createButton({\r\n        label=label, click_function=\"click_fadeToggle\", function_owner=self,\r\n        position={-0.5,-1,0.72}, rotation={180,180,0}, height=160, width=160,\r\n        font_size=110, font_color={0.5,0.5,0.5}, color={0.1,0.1,0.1},\r\n        tooltip=tooltip\r\n    })\r\nend\r\n\r\n--Inputs for entering time amount\r\nfunction createTimeInputs()\r\n    self.createInput({\r\n        label=\"TIME\", input_function=\"input_time\", function_owner=self,\r\n        position={0,1,0.72}, rotation={0,0,0}, alignment=3,\r\n        height=114, width=260, font_size=80, font_color={0.5,0.5,0.5},\r\n        color={0.1,0.1,0.1}, value=countdownGoal, validation=2, tab=1,\r\n        tooltip=\"# of seconds\"\r\n    })\r\n    self.createInput({\r\n        label=\"TIME\", input_function=\"input_time\", function_owner=self,\r\n        position={0,-1,0.72}, rotation={0,0,180}, alignment=3,\r\n        height=114, width=260, font_size=80, font_color={0.5,0.5,0.5},\r\n        color={0.1,0.1,0.1}, value=countdownGoal, validation=2, tab=1,\r\n        tooltip=\"# of seconds\"\r\n    })\r\nend\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--Data tables\r\n\r\n\r\n\r\n--Rotations for the 4 faces of the timer\r\nref_faceRotation = {\r\n    [false] = {\r\n        {-90, 0, 0},\r\n        {90, 0, 180},\r\n        {0, 90, -90},\r\n        {0, -90, 90},\r\n    },\r\n    [true] = {\r\n        {-90, 0, 180},\r\n        {90, 0, 0},\r\n        {0, -90, -90},\r\n        {0, 90, 90},\r\n    }\r\n}\r\n\r\n-- Char width table by Indimeco\r\nref_charUnitWidth = {\r\n    ['`'] = 2381, ['~'] = 2381, ['1'] = 1724, ['!'] = 1493, ['2'] = 2381,\r\n    ['@'] = 4348, ['3'] = 2381, ['#'] = 3030, ['4'] = 2564, ['$'] = 2381,\r\n    ['5'] = 2381, ['%'] = 3846, ['6'] = 2564, ['^'] = 2564, ['7'] = 2174,\r\n    ['&'] = 2777, ['8'] = 2564, ['*'] = 2174, ['9'] = 2564, ['('] = 1724,\r\n    ['0'] = 2564, [')'] = 1724, ['-'] = 1724, ['_'] = 2381, ['='] = 2381,\r\n    ['+'] = 2381, ['q'] = 2564, ['Q'] = 3226, ['w'] = 3704, ['W'] = 4167,\r\n    ['e'] = 2174, ['E'] = 2381, ['r'] = 1724, ['R'] = 2777, ['t'] = 1724,\r\n    ['T'] = 2381, ['y'] = 2564, ['Y'] = 2564, ['u'] = 2564, ['U'] = 3030,\r\n    ['i'] = 1282, ['I'] = 1282, ['o'] = 2381, ['O'] = 3226, ['p'] = 2564,\r\n    ['P'] = 2564, ['['] = 1724, ['{'] = 1724, [']'] = 1724, ['}'] = 1724,\r\n    ['|'] = 1493, ['\\\\'] = 1923, ['a'] = 2564, ['A'] = 2777, ['s'] = 1923,\r\n    ['S'] = 2381, ['d'] = 2564, ['D'] = 3030, ['f'] = 1724, ['F'] = 2381,\r\n    ['g'] = 2564, ['G'] = 2777, ['h'] = 2564, ['H'] = 3030, ['j'] = 1075,\r\n    ['J'] = 1282, ['k'] = 2381, ['K'] = 2777, ['l'] = 1282, ['L'] = 2174,\r\n    [';'] = 1282, [':'] = 1282, ['\\''] = 855, ['\"'] = 1724, ['z'] = 1923,\r\n    ['Z'] = 2564, ['x'] = 2381, ['X'] = 2777, ['c'] = 1923, ['C'] = 2564,\r\n    ['v'] = 2564, ['V'] = 2777, ['b'] = 2564, ['B'] = 2564, ['n'] = 2564,\r\n    ['N'] = 3226, ['m'] = 3846, ['M'] = 3846, [','] = 1282, ['<'] = 2174,\r\n    ['.'] = 1282, ['>'] = 2174, ['/'] = 1923, ['?'] = 2174, [' '] = 1282,\r\n    ['avg'] = 2500,\r\n}",
          "LuaScriptState": "{\"cg\":180,\"cr\":-0.00334334373474121,\"ft\":false,\"pc\":false,\"rof\":false}",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Digital Hourglass",
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Value": "Digital Hourglass ",
              "Rotation": {
                "x": 0.0,
                "y": 180.0,
                "z": 180.0
              }
            }
          ]
        },
        {
          "GUID": "9d8931",
          "Name": "Custom_Assetbundle",
          "Transform": {
            "posX": -29.0000019,
            "posY": 5.539598,
            "posZ": 1.00007343,
            "rotX": 0.00279748952,
            "rotY": -0.000132912377,
            "rotZ": -8.46465337E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Sand Timer with Alarm",
          "Description": "Sets off an audible alarm when time runs out. Counts down in seconds.",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomAssetbundle": {
            "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/1647721139204565686/B66AA18BE33CF221E39E6632880649F824139042/",
            "AssetbundleSecondaryURL": "http://cloud-3.steamusercontent.com/ugc/1647720232360972539/F2C72CE1EAC1161586F81D0BE2DA54FD2D08C1F6/",
            "MaterialIndex": 0,
            "TypeIndex": 1,
            "LoopingEffectIndex": 0
          },
          "LuaScript": "dur = 0\r\nlab = \"\"\r\nsiz = 0\r\nlocal startTimer = false\r\nlocal targetTime = nil\r\nlocal startTime = nil\r\nlocal paused = false\r\nlocal per = nil\r\nlocal timeElapsed\r\nlocal savedTime = 0\r\nlocal targetPer = 0.7\r\nlocal tempDur = 0\r\nfunction onSave()\r\n    local data_to_save = {\r\n        d=dur,\r\n        l=lab,\r\n        s=siz,\r\n    }\r\n    saved_data = JSON.encode(data_to_save)\r\n    --saved_data = \"\" --Remove -- at start + save to clear save data\r\n    return saved_data\r\nend\r\n\r\n--Runs when game is loaded\r\nfunction onLoad(saved_data)\r\n    --Loads the tracking for if the game has started yet\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        dur = loaded_data.d\r\n        lab = loaded_data.l\r\n        siz = loaded_data.s\r\n    else\r\n        dur = 5\r\n        lab = \"5\"\r\n        siz = 75\r\n    end\r\n    local size = siz\r\n    self.createInput({\r\n        input_function = \"setDuration\",\r\n        function_owner = self,\r\n        label          = lab,\r\n        alignment      = 3,\r\n        position       = {x=0, y=2.5, z=0},\r\n        rotation       = {x=0, y=180, z=0},\r\n        scale          = {2.5,2.5,2.5},\r\n        --width          = 300,\r\n        --height         = 300,\r\n        font_size      = size,\r\n        font_color     = {0,0,0},\r\n        color          = {1,1,1},\r\n        value          = dur,\r\n        validation     = 2,\r\n    })\r\n    self.createInput({\r\n        input_function = \"setDuration\",\r\n        function_owner = self,\r\n        label          = lab,\r\n        alignment      = 3,\r\n        position       = {x=0, y=-2.5, z=0},\r\n        rotation       = {x=180, y=0, z=0},\r\n        scale          = {2.5,2.5,2.5},\r\n        --width          = 300,\r\n        --height         = 300,\r\n        font_size      = size,\r\n        font_color     = {0,0,0},\r\n        color          = {1,1,1},\r\n        value          = dur,\r\n        validation     = 2,\r\n    })\r\n    Wait.frames(function()hideComponent(\"SandTop\")end, 5)\r\n\r\nend\r\n\r\n\r\nfunction hideComponent(name)\r\n    self.getChild(\"Sand Timer(Clone)\").getChild(name).getComponent(\"Renderer\").set(\"enabled\", false)\r\n    self.getChild(\"Sand Timer(Clone)\").getChild(\"SandBot\").getComponent(\"Transform\").set(\"localScale\", Vector(1,targetPer,1))\r\n    self.getChild(\"Sand Timer(Clone)\").getChild(\"Trickle\").getComponent(\"Renderer\").set(\"enabled\", false)\r\nend\r\n\r\nfunction setDuration(obj, color, input, stillEditing)\r\n    local stringCount = string.len(input)\r\n    if(stringCount > 5) then stringCount = 5 end\r\n    local sizeTable = {75,70,50,35,30}\r\n    dur = tonumber(input)\r\n    lab = input\r\n    siz = sizeTable[stringCount]\r\n\r\n    self.editInput({index = 1, label = input, value = input, font_size = sizeTable[stringCount]})\r\n    self.editInput({index = 0, label = input, value = input, font_size = sizeTable[stringCount]})\r\nend\r\n\r\n\r\n\r\n\r\nfunction reset()\r\n    self.getChild(\"Sand Timer(Clone)\").getChild(\"SandTop\").getComponent(\"Renderer\").set(\"enabled\", true)\r\n    self.getChild(\"Sand Timer(Clone)\").getChild(\"SandBot\").getComponent(\"Renderer\").set(\"enabled\", true)\r\n    self.getChild(\"Sand Timer(Clone)\").getChild(\"SandTop\").getComponent(\"Transform\").set(\"localScale\", Vector(1,1,1))\r\n    self.getChild(\"Sand Timer(Clone)\").getChild(\"SandBot\").getComponent(\"Transform\").set(\"localScale\", Vector(1,0,1))\r\nend\r\nfunction onUpdate()\r\n    if(startTimer) then\r\n        if(not paused) then\r\n            self.getChild(\"Sand Timer(Clone)\").getChild(\"Trickle\").getComponent(\"Renderer\").set(\"enabled\", true)\r\n            timeElapsed = (Time.time-startTime) + savedTime\r\n            per = timeElapsed/tempDur*targetPer\r\n            --print(per)\r\n            self.getChild(\"Sand Timer(Clone)\").getChild(\"SandTop\").getComponent(\"Transform\").set(\"localScale\", Vector(1,targetPer-per,1))\r\n            self.getChild(\"Sand Timer(Clone)\").getChild(\"SandBot\").getComponent(\"Transform\").set(\"localScale\", Vector(1,per,1))\r\n            if(per >= targetPer) then\r\n                self.AssetBundle.playTriggerEffect(0)\r\n                self.getChild(\"Sand Timer(Clone)\").getChild(\"SandTop\").getComponent(\"Renderer\").set(\"enabled\", false)\r\n                self.getChild(\"Sand Timer(Clone)\").getChild(\"Trickle\").getComponent(\"Renderer\").set(\"enabled\", false)\r\n                startTimer = false\r\n            end\r\n        else\r\n            --do nothing\r\n            self.getChild(\"Sand Timer(Clone)\").getChild(\"Trickle\").getComponent(\"Renderer\").set(\"enabled\", false)\r\n            startTime=Time.time\r\n            savedTime = timeElapsed\r\n        end\r\n    end\r\nend\r\n\r\nfunction setPause(aBool)\r\n    paused = aBool\r\nend\r\n\r\nfunction onCollisionEnter(info)\r\n    if(self.is_face_down) then\r\n        local pos = self.getPosition()\r\n        self.setRotation({0,0,0})\r\n        startTimer = true\r\n        targetTime = Time.time + dur\r\n        startTime = Time.time\r\n        tempDur = dur\r\n        togglePause = false\r\n        savedTime = 0\r\n        reset()\r\n        paused = false\r\n        tempDur = dur\r\n        local all = getAllObjects()\r\n        for each, obj in pairs(all) do\r\n            if(obj.getName()==\"Pause Block\") then\r\n                obj.call(\"unPause\")\r\n                break\r\n            end\r\n        end\r\n    end\r\nend",
          "LuaScriptState": "{\"d\":30,\"l\":\"30\",\"s\":70}",
          "XmlUI": ""
        },
        {
          "GUID": "00b85a",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": -28.9999866,
            "posY": 3.170459,
            "posZ": -0.000705151644,
            "rotX": 359.393768,
            "rotY": -0.00538942125,
            "rotZ": 359.980774,
            "scaleX": 3.54999781,
            "scaleY": 3.54999781,
            "scaleZ": 3.54999781
          },
          "Nickname": "Deck Splitter",
          "Description": "By: MrStump",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.9999998,
            "g": 0.992160261,
            "b": 0.9999998
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "http://pastebin.com/raw/mxW2ba0r",
            "DiffuseURL": "http://i.imgur.com/SGRhJHC.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 1,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 0.8745098,
                "g": 0.8117647,
                "b": 0.745098054
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 3.0,
              "FresnelStrength": 0.1
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "--[[ Deck Splitter by MrStump ]]--\r\n\r\n--Distance used between cards. Scales with card size, probably would only need changing with special cards\r\ncardOffset = 2.5\r\n\r\n--[[Runs on start]]\r\nfunction onload()\r\n    deckRegistered = false\r\n    suspendDetection = false\r\r\nend\r\n\r\n--[[Runs every time anything touches the bag (or it touches anything)]]\r\nfunction onCollisionEnter(collisionInfo)\r\n    --Get the name of the object touching the bag and check if it is that of a deck/custom deck\r\n    local collidingObject = collisionInfo.collision_object\r\n    local collidingObjectName = tostring(collidingObject)\r\n    local deckType1 = 'Deck(Clone) (LuaGameObjectScript)'\r\n    local deckType2 = 'DeckCustom(Clone) (LuaGameObjectScript)'\r\n    if collidingObjectName == deckType1 or collidingObjectName == deckType2 then\r\n        --Gets number of items in this tool\r\n        local decksInBag = #self.getObjects()\r\n        --Initializes the tool, creating variables for later use\r\n        if decksInBag == 1 and deckRegistered == false then\r\n            deck = collidingObject\r\n            deckCount = deck.getQuantity()\r\n            distanceScale = deck.getScale().x\r\n            deckRegistered = true\r\n            stacks = 2\r\n            cards = math.floor(deckCount/2)\r\n            spawnButtons()\r\n        --Runs if you put other objects in the bag before the deck\r\n        elseif decksInBag > 1 then\r\n            broadcastToAll('Too many decks/objects in the deck splitting tool.\\nPlease remove all objects and try again.', {1,1,1})\r\n            resetTool()\r\n        end\r\n    end\r\nend\r\n\r\n--[[Creates the buttons]]\r\nfunction spawnButtons()\r\n    buttonParams.countDisplay.label = 'Cards In Deck: ' .. deckCount\r\n    buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n    buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n    for i, v in pairs(buttonParams) do\r\n        self.createButton(v)\r\n    end\r\nend\r\n\r\n--[[Clears all information]]\r\nfunction resetTool()\r\n    deckRegistered = false\r\n    self.clearButtons()\r\nend\r\n\r\n--[[Watches for a deck to be removed by the player, resetting the tool.]]\r\nfunction update()\r\n    --suspendDetection is only true when the script is removing the deck(to split out cards)\r\n    if suspendDetection == false then\r\n        --deckRegistered is only true when 1 and only 1 deck is in the tool\r\n        --#self.getObjects() is seeing if there are 0 decks in the tool\r\n        if deckRegistered == true and #self.getObjects() == 0 then\r\n            resetTool()\r\n        end\r\n    end\r\nend\r\n\r\n--[[These 4 functions are the + and - for the stacks. Sets our desired # of stacks]]\r\nfunction stacksP1()\r\n    --Makes sure we don't try to make more stacks than we have cards\r\n    if stacks < deckCount then\r\n        stacks = stacks + 1\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction stacksP5()\r\n    if stacks < (deckCount - 4) then\r\n        stacks = stacks + 5\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction stacksM1()\r\n    --Makes sure we never go below 2 stacks.\r\n    if stacks > 2 then\r\n        stacks = stacks - 1\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction stacksM5()\r\n    if stacks > 6 then\r\n        stacks = stacks - 5\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\n\r\n--[[These 4 functions are the + and - for cards (number of cards in a stack).]]\r\nfunction cardsP1()\r\n    --Makes sure we can't put more cards into a pile than is possible\r\n    if cards < math.floor(deckCount/stacks) then\r\n        cards = cards + 1\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction cardsP5()\r\n    if cards < (math.floor(deckCount/stacks) - 4) then\r\n        cards = cards + 5\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction cardsM1()\r\n    if cards > 1 then\r\n        cards = cards - 1\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction cardsM5()\r\n    if cards > 5 then\r\n        cards = cards - 5\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\n\r\nfunction updateButtons()\r\n    for i, v in pairs(buttonParams) do\r\n        self.editButton(v)\r\n        if i==3 then\r\n            break\r\n        end\r\n    end\r\nend\r\n\r\n--[[Activated by button press, starts the process of pulling the deck out of the bag.\r\n    We cannot edit items while they are in a bag (they don't exist) so this is required first.]]\r\nfunction splitDeck()\r\n    --This prevents the tool from thinking the player removed the deck (see function update())\r\n    suspendDetection = true\r\n    --We Figure out where the tool is and add 1 to its y axis.\r\n    local selfPosition = self.getPosition()\r\n    local x = selfPosition.x\r\n    local y = selfPosition.y+2\r\n    local z = selfPosition.z\r\n    --This param removes the deck from the bag. The callback is a function that runs once it has existed and loaded the bag\r\n    local deckTakeParam = {position={x,y,z}, rotation={180,0,0}, callback='dealCards', callback_owner=self}\r\n    deck = self.takeObject(deckTakeParam)\r\nend\r\n\r\n--[[Callback function, triggered by the script pulling the deck out of the bag]]\r\nfunction dealCards()\r\n    --Loop, runs once for each card we want in each stack\r\n    for i=1, cards do\r\n        --Loop, runs once for each stack we want.\r\n        for j=1, stacks do\r\n            --Get own position and rotation, for positioning/rotation of cards\r\n            local selfPosition = self.getPosition()\r\n            local selfRotation = self.getRotation()\r\n            --This determines their rotation relative to the tool (face down)\r\n            local xRot = selfRotation.x\r\n            local yRot = selfRotation.y\r\n            local zRot = selfRotation.z\r\n            --This determines their position relative to the tool's facing\r\n            local x = selfPosition.x + math.sin( (90+yRot)*0.0174532 ) * ((0.8*self.getScale().x/distanceScale)+(cardOffset*j*distanceScale))-- see end of code for breakdown\r\n            local y = selfPosition.y + 1\r\n            local z = selfPosition.z + math.cos( (90+yRot)*0.0174532 ) * ((0.8*self.getScale().x/distanceScale)+(cardOffset*j*distanceScale))-- see end of code for breakdown\r\n            --This sets the parameters for where to place each card\r\n            local takeParam = {position={x,y,z}, rotation={xRot+180, yRot, zRot}}\r\n            deck.takeObject(takeParam)\r\n        end\r\n    end\r\n    deckCount = deck.getQuantity()\r\n    if stacks > deckCount then\r\n        stacks = deckCount\r\n        cards = math.floor(deckCount/stacks)\r\n    elseif deckCount < (stacks*cards) then\r\n        cards = math.floor(deckCount/stacks)\r\n    end\r\n    buttonParams.countDisplay.label = 'Cards In Deck: ' .. deckCount\r\n    buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n    buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n    updateButtons()\r\n    Timer.destroy(self.getGUID())\r\n    Timer.create({identifier=self.getGUID(), function_name='afterEntry', function_owner=self, delay=0.5})\r\nend\r\n\r\nfunction afterEntry()\r\n    suspendDetection = false\r\nend\r\n\r\nbuttonParams = {\r\n    countDisplay = {\r\n        index=0, label='Cards In Deck: -', click_function='none', function_owner=self,\r\n        position={0,0.04,0.54}, rotation={0,180,0}, width=0, height=0, font_size=60\r\n    },\r\n    stacksDisplay = {\r\n        index=1, label='STACKS:\\n-', click_function='none', function_owner=self,\r\n        position={0,0.08,0.22}, rotation={0,180,0}, width=310, height=200, font_size=70\r\n    },\r\n    cardsDisplay = {\r\n        index=2, label='CARDS:\\n-', click_function='none', function_owner=self,\r\n        position={0,0.08,-0.22}, rotation={0,180,0}, width=310, height=200, font_size=70\r\n    },\r\n    instruction = {\r\n        label='Stacks first, Cards second', click_function='none', function_owner=self,\r\n        position={0,0.04,-0.54}, rotation={0,180,0}, width=0, height=0, font_size=60\r\n    },\r\n    split = {\r\n        label='^^^ SPLIT DECK ^^^', click_function='splitDeck', function_owner=self,\r\n        position={-1.05,0,0}, rotation={0,-90,0}, width=580, height=65, font_size=60\r\n    },\r\n    stacksP1 = {\r\n        label='+1', click_function='stacksP1', function_owner=self,\r\n        position={-0.45,0.08,0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    stacksP5 = {\r\n        label='+5', click_function='stacksP5', function_owner=self,\r\n        position={-0.722,0.08,0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    },\r\n    stacksM1 = {\r\n        label='-1', click_function='stacksM1', function_owner=self,\r\n        position={0.45,0.08,0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    stacksM5 = {\r\n        label='-5', click_function='stacksM5', function_owner=self,\r\n        position={0.722,0.08,0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    },\r\n    cardsP1 = {\r\n        label='+1', click_function='cardsP1', function_owner=self,\r\n        position={-0.45,0.08,-0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    cardsP5 = {\r\n        label='+5', click_function='cardsP5', function_owner=self,\r\n        position={-0.722,0.08,-0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    },\r\n    cardsM1 = {\r\n        label='-1', click_function='cardsM1', function_owner=self,\r\n        position={0.45,0.08,-0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    cardsM5 = {\r\n        label='-5', click_function='cardsM5', function_owner=self,\r\n        position={0.722,0.08,-0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    }\r\n}\r\n\r\n--[[ Breakdown of how I determined where to place the cards.\r\n\r\n    local x = selfPosition.x + math.sin( (90+yRot)*0.0174532 ) * ((1.2/distanceScale)+(cardOffset*j*distanceScale))\r\n    x is the x position of where I want the card, relative to which direction the object (self) is facing.\r\n    math.sin(yRot*0.0174532) * distance ~~~ This is the core formula at work here. In combination with using math.cos on the z axis.\r\n    sin+cos on x/z are converting an angle (yRot) into a direction. Then we multiply that by a distance to get an x/z.\r\n    ((1.2/distanceScale)+(cardOffset*j*distanceScale)) ~~~ this is my distance calculation, made to scale with each card.\r\n    the first half (1.2/distanceScale) figures out how far offset we need to make the first card, taking into account its scale.\r\n        that way, a really huge card won't accidently go right back int othe tool.\r\n    the second half (cardOffset*j*distanceScale) multiplies an offset (how far each pile should be from eachother) by j (j=1 for first pile, j=2 second pile ,etc)\r\n        then we multiply that by the scale modifier so, again, big cards don't even up overlapping/smashing into eachother\r\n    The reason for the 90+ is because without it, the cards would come out the TOP. So by adding 90, we're rotating the direction by 90 degrees clockwise.\r\n\r\n    I hope this helps.\r\n]]\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "9210a0",
          "Name": "Bag",
          "Transform": {
            "posX": 42.7337036,
            "posY": 1.03610623,
            "posZ": -3.67514753,
            "rotX": 1.3288776E-06,
            "rotY": 0.006280225,
            "rotZ": 2.57139868E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "By Directsun",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.9180328,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "Bag": {
            "Order": 0
          },
          "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.5\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n  local bagObjList = self.getObjects()\r\n  for _, bagObj in ipairs(bagObjList) do\r\n    local data = bagObj.lua_script_state\r\n      if data ~= nil then\r\n        local j = JSON.decode(data)\r\n        if j ~= nil and j.ml ~= nil then\r\n          for guid, entry in pairs(j.ml) do\r\n            memoryList[guid] = entry\r\n          end\r\n        end\r\n      end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    print(\"updating memory with moves\")\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n  local objTable = {}\r\n  local curObj = {}\r\n\r\n  for guid in pairs(memoryListBackup) do\r\n    print(guid)\r\n    curObj = getObjectFromGUID(guid)\r\n    table.insert(objTable, curObj)\r\n  end\r\n\r\n  return objTable\r\n  -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n      objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n      objsToHaveButtons = getAllObjects()\r\n    end\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        -- print(_)\r\n        if obj ~= self then\r\n            local dummyIndex = howManyButtons\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            local adjusting_factor = 1.25\r\n            if self.getData().Name ~= 'Bag' then adjusting_factor = 1 end\r\n            globalScaleFactor = adjusting_factor * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(dummyIndex, obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n              color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(index, obj, move)\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n       theList = moveList\r\n       if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n         local prevObj = getObjectFromGUID(previousGuid)\r\n         prevObj.highlightOff()\r\n         self.editButton({index=previousIndex, color=colorMove})\r\n         theList[previousGuid] = nil\r\n       end\r\n       previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n      color = {0.75,0.25,0.25,0.6}\r\n      if move == true then\r\n        color = colorMove\r\n      end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n      memoryList = memoryListBackup\r\n      broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n  for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n        broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n        self.clearButtons()\r\n        createMemoryActionButtons()\r\n        local count = 0\r\n        for guid in pairs(memoryList) do\r\n            count = count + 1\r\n            memoryListBackup[guid] = nil\r\n            local obj = getObjectFromGUID(guid)\r\n            if obj ~= nil then obj.highlightOff() end\r\n        end\r\n        broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n        memoryList = memoryListBackup\r\n        updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n      label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n      position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    })\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid,\r\n                        position=entry.pos,\r\n                        rotation=entry.rot,\r\n                        smooth=true\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    -- broadcastToAll(\"Objects Placed\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    -- broadcastToAll(\"Objects Recalled\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n\tlocal angle = math.rad(obj.getRotation().y)\r\n  local x = desiredPos.x * math.sin(angle)\r\n\tlocal z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n  local mult = 10^(dec or 0)\r\n  return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n-- [Author ?] print deep content of a table (like PHP print_r method)\r\nfunction print_r (t, indent, done)\r\n    done = done or {}\r\n    indent = indent or ' '\r\n    local nextIndent -- Storage for next indentation value\r\n    for key, value in pairs (t) do\r\n    if type (value) == \"table\" and not done [value] then\r\n        nextIndent = nextIndent or\r\n            (indent .. string.rep(' ',string.len(tostring (key))+2))\r\n            -- Shortcut conditional allocation\r\n        done [value] = true\r\n        print (indent .. \"[\" .. tostring (key) .. \"] => Table {\");\r\n        print  (nextIndent .. \"{\");\r\n        print_r (value, nextIndent .. string.rep(' ',2), done)\r\n        print  (nextIndent .. \"}\");\r\n    else\r\n        print  (indent .. \"[\" .. tostring (key) .. \"] => \" .. tostring (value)..\"\")\r\n    end\r\n    end\r\nend",
          "LuaScriptState": "{\"ml\":[]}",
          "XmlUI": ""
        },
        {
          "GUID": "ed777a",
          "Name": "Bag",
          "Transform": {
            "posX": 36.1246452,
            "posY": 1.03610218,
            "posZ": -2.202695,
            "rotX": 2.605444E-05,
            "rotY": 180.03743,
            "rotZ": -4.393914E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.7058823,
            "g": 0.366520882,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "Bag": {
            "Order": 0
          },
          "LuaScript": "function onload()\r\n    self.createButton({\r\n        click_function = \"pick\",\r\n        function_owner = self,\r\n        label          = \"Pile up\",\r\n        width           = 2000,\r\n        height          = 750,\r\n        font_size       = 400,\r\n        position        = {-0, 0.5, 2.5}\r\n    })\r\nend\r\n\r\nfunction pick()\r\n    self.shuffle()\r\n    local objects = self.getObjects()\r\n    local delayAdd = 10\r\n    local delaySum = delayAdd\r\n    local offset = 1\r\n    local x = self.getPosition().x+8\r\n    local y = self.getPosition().y\r\n    local z = self.getPosition().z\r\n    for i, obj in ipairs(objects) do\r\n        Wait.frames(function()\r\n            local this = self.takeObject({position = {0,0,0}, rotation = {0, 180, 180}})\r\n            local jump = this.getBoundsNormalized().size.y * 0.5\r\n            offset = offset + jump\r\n            this.setPositionSmooth({x, y + offset, z})\r\n            offset = offset + jump\r\n        end, delaySum)\r\n        delaySum = delaySum+delayAdd\r\n    end\r\nend",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "55bd8e",
          "Name": "Custom_Model",
          "Transform": {
            "posX": -39.7815361,
            "posY": 3.17306662,
            "posZ": 7.42019653,
            "rotX": 0.0435971729,
            "rotY": 179.999954,
            "rotZ": 0.0166746825,
            "scaleX": 5.0,
            "scaleY": 1.0,
            "scaleZ": 5.0
          },
          "Nickname": "First Player Detector",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.905,
            "g": 0.898,
            "b": 0.171999454
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": false,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "http://cloud-3.steamusercontent.com/ugc/1661228087344923464/04B20A9FD04D9756FBA7D9D1703AB230E7914CD4/",
            "DiffuseURL": "",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 1,
            "TypeIndex": 0,
            "CastShadows": true
          },
          "LuaScript": "ButtonColors = {White = {1, 1, 1}, Brown = {0.443, 0.231, 0.09}, Red = {0.856, 0.1, 0.094}, Orange = {0.956, 0.392, 0.113},\n    Yellow = {0.905, 0.898, 0.172}, Green = {0.192, 0.701, 0.168}, Teal = {0.129, 0.694, 0.607}, Blue = {0.118, 0.53, 1},\n    Purple = {0.627, 0.125, 0.941}, Pink = {0.96, 0.439, 0.807}}\n\nSixSymbolColor = {White = '[FFFFFF]', Brown = '[703A16]', Red = '[DA1917]', Orange = '[F3631C]',\n    Yellow = '[E6E42B]', Green = '[30B22A]', Teal = '[20B09A]', Blue = '[1E87FF]',\n    Purple = '[9F1FEF]', Pink = '[F46FCD]'}\n\nClickButton = {}\r\nClickButton.click_function = 'FirstPlayer'\r\nClickButton.label = 'First\\nPlayer'\r\nClickButton.function_owner = self\r\nClickButton.rotation = { 0, 0, 0 }\r\nClickButton.position = { 0, 0.15, 0 }\r\nClickButton.font_size = 100\r\nClickButton.width = 350\r\nClickButton.height = 350\r\n\n\nfunction onload()\n    self.createButton(ClickButton)\nend\n\nfunction FirstPlayer()\n    q = 1\r\n    PlayerColors = {}\r\n    for _, p in ipairs(getSeatedPlayers()) do\r\n    PlayerColors[q] = Player[p].color\r\n    q = q+1\r\n    end\r\n\n    RandomPlayer = math.random(1, #PlayerColors) + os.date('%S')\n    RandomPlayer = math.fmod(RandomPlayer,#PlayerColors)\n    if RandomPlayer < 0 then RandomPlayer = RandomPlayer + #PlayerColors end\n    RandomPlayer = RandomPlayer + 1\n\n    for i=1, #PlayerColors, 1 do\n        if RandomPlayer == i then self.setColorTint(ButtonColors[PlayerColors[i]]) end\n    end\n\n    AllPlayersString = ''\n    for i=1, #PlayerColors, 1 do\n        if i != q-1 then\n        AllPlayersString = AllPlayersString .. tostring(PlayerColors[i]) .. ', '\n        else\n        AllPlayersString = AllPlayersString .. tostring(PlayerColors[i])\n        end\n    end\n\n    pl = PlayerColors[RandomPlayer]\n    printToAll('From [FFFFFF](' .. AllPlayersString .. ')[7F7F7F] players, I choose ' .. SixSymbolColor[tostring(pl)]..tostring(pl) .. '[7F7F7F] to be [i]the first player[/i]',  {0.5, 0.5, 0.5})\nend",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b9c3d5",
          "Name": "Custom_Tile",
          "Transform": {
            "posX": -40.0,
            "posY": 3.039588,
            "posZ": 7.99999571,
            "rotX": 359.948669,
            "rotY": 179.9963,
            "rotZ": -0.000426513056,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.0,
            "g": 0.0,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "https://i.imgur.com/gQZAgJF.jpg",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomTile": {
              "Type": 0,
              "Thickness": 0.1,
              "Stackable": false,
              "Stretch": false
            }
          },
          "LuaScript": "--Alphabetize cards by their names if they have one (true or false)\nalphabetize = false\n--Color of the deck highlight and preview elements\nuiColor = {0,1,0}\n--How many rows or columns are possible\nmaxRowCol = 20\n--How much space is put between cards\nspacer = 0.2\n--If it flips the cards or not\nflip = true\n--Optional height offset so cards are raised off the table more\nheightOffset = 0\n\nfunction onSave()\n    saved_data = JSON.encode(layoutData)\n    return saved_data\nend\n\nfunction onload(saved_data)\n    --Loads the tracking for if the game has started yet\n    if saved_data ~= \"\" then\n        layoutData = JSON.decode(saved_data)\n    else\n        layoutData = {row=5, col=6}\n    end\n\n    createInputs()\n    createClickButtons()\nend\n\n\n\n--Collision detection to find deck\n\n\n\n--Detect if tool is placed on top of a deck, designating deck\nfunction onCollisionEnter(collision_info)\n    if collision_info.collision_object.tag == \"Deck\" and collision_info.collision_object ~= deck then\n        if deck ~= nil then deck.highlightOff() end\n        deck = collision_info.collision_object\n        deck.highlightOn(uiColor)\n    end\nend\n--Kill the highlight if the tool is destroyed\nfunction onDestroy()\n    if deck~=nil then deck.highlightOff() end\nend\n\n\n\n--Click actions and input changes\n\n\n\n--Click of the submit button, starts layout\nfunction click_submit()\n    --Error protection\n    if deck == nil then broadcastToAll(\"No deck designated.\", {0.9,0.2,0.2}) return end\n    --Remove buttons/previews\n    previewActive = nil\n    self.clearButtons()\n    --Lock until finished\n    self.setLock(true)\n    --Lays out cards in a coroutine\n    layout(\"card\")\nend\n\n--Click of the preview button\nfunction click_preview()\n    if previewActive ~= true then\n        previewActive = true\n        --Error protection\n        if deck == nil then broadcastToAll(\"No deck designated.\", {0.9,0.2,0.2}) return end\n        --Start routine that will\n        self.clearButtons()\n        layout(\"button\")\n    else\n        previewActive = nil\n        self.clearButtons()\n        createClickButtons()\n    end\nend\n\n--Detect changes to number inputs\nfunction input_change(_, _, userInput, stillEditing, layoutKey)\n    if stillEditing == false then\n        --Updates number or advises player to use a valid number\n        if userInput==\"\" or tonumber(userInput)<1 or tonumber(userInput)>maxRowCol then\n            broadcastToAll(\"Invalid number entry. Try a number from 1 - \"..maxRowCol..\".\", {0.9,0.2,0.2})\n        else\n            layoutData[layoutKey] = math.abs(tonumber(userInput))\n            if previewActive == true then\n                self.clearButtons()\n                layout(\"button\")\n            end\n        end\n    end\nend\n\n\n\n--Laying out of cards/buttons\n\n\n\n--Coroutine that lays out cards\nfunction layout(whichType)\n    function layout_routine()\n        --Get size of cards (need x/z) and add the spacer to it\n        local size = deck.getBoundsNormalized().size\n        size = {x=size.x+spacer, y=size.y, z=size.z+spacer}\n        --Rotate the x/z to match the deck+tool's rotation\n        local angle = math.rad(deck.getRotation().y - self.getRotation().y)\n        local x = math.abs(size.x * math.cos(angle)) + math.abs(size.z * math.sin(angle))\n        local z = math.abs(size.x * math.sin(angle)) + math.abs(size.z * math.cos(angle))\n        size.x = x\n        size.z = z\n        --Determine first card's location\n        local pos_starting = {\n            x = -size.x * (layoutData.col-1)/2,\n            y = 0 + heightOffset,\n            z = -size.z\n        }\n        --Create variables used in placement\n        local rowStep, colStep = 0, 0\n\n        --Placement\n        for i=1, layoutData.col*layoutData.row do\n            --Find position for card\n            local pos_local = {\n                x = pos_starting.x + size.x * colStep,\n                y = pos_starting.y,\n                z = pos_starting.z - size.z * rowStep,\n            }\n            local pos = self.positionToWorld(pos_local)\n            --Set up next loop\n            colStep = colStep + 1\n            if colStep > layoutData.col-1 then\n                colStep = 0\n                rowStep = rowStep + 1\n            end\n            --Apply action for position\n            if whichType == \"card\" then\n                --Places card\n                if alphabetize == false then\n                    deck.takeObject({position=pos, flip=flip})\n                else\n                    if #deck.getObjects() > 0 then\n                        --Handles most cards\n                        local nextIndex = findNextCardIndex()\n                        deck.takeObject({position=pos, flip=flip, index=nextIndex})\n                    else\n                        --Handles the leftover card\n                        local find_func = function(o) return o.tag==\"Card\" end\n                        local objList = findInRadiusBy(deck.getPosition(), 0.5, find_func)\n                        if #objList > 0 then\n                            objList[1].setPosition(pos)\n                            if flip then\n                                local rot = objList[1].getRotation()\n                                rot.z = rot.z+180\n                                objList[1].setRotationSmooth(rot)\n                            end\n                        end\n                    end\n                end\n            elseif whichType == \"button\" then\n                --Places button\n                self.createButton({\n                    label=\"X\", click_function=\"none\", function_owner=self,\n                    position=pos_local, height=0, width=0, font_size=1000,\n                    font_color=uiColor,\n                    rotation={0,deck.getRotation().y-self.getRotation().y,0},\n                })\n            end\n            coroutine.yield(0)\n            --Kills loop if deck is exhausted\n            if deck==nil then break end\n        end\n\n        self.setLock(false)\n        createClickButtons()\n        return 1\n    end\n    startLuaCoroutine(self, \"layout_routine\")\nend\n\n--Gets the order of cards alphabetized\nfunction findNextCardIndex()\n    local orderList = {}\n    for _, card in ipairs(deck.getObjects()) do\n        if card.nickname ~= \"\" then\n            local insertTable = {name=card.nickname, index=card.index}\n            table.insert(orderList, insertTable)\n        end\n    end\n    --Sort ordered list\n    local sort_func = function(a,b) return a[\"name\"] > b[\"name\"] end\n    table.sort(orderList, sort_func)\n    --Add no-names onto start\n    for _, card in ipairs(deck.getObjects()) do\n        if card.nickname == \"\" then\n            local insertTable = {name=card.nickname, index=card.index}\n            table.insert(orderList, 1, insertTable)\n        end\n    end\n    return orderList[1].index\nend\n\n--Finds objects in radius of a position, accepts optional filtering function\n--Example func: function(o) return o.tag==\"Deck\" or o.tag==\"Card\" end\nfunction findInRadiusBy(pos, radius, func)\n    local objList = Physics.cast({\n        origin=pos, direction={0,1,0}, type=2, size={radius,radius,radius},\n        max_distance=0, --debug=true\n    })\n\n    local refinedList = {}\n    for _, obj in ipairs(objList) do\n        if func == nil then\n            table.insert(refinedList, obj.hit_object)\n        else\n            if func(obj.hit_object) then\n                table.insert(refinedList, obj.hit_object)\n            end\n        end\n    end\n\n    return refinedList\nend\n\n\n\n--Button/input creation\n\n\n\nfunction createInputs()\n    function colInput(w,x,y,z) input_change(w,x,y,z,\"col\") end\n    self.createInput({\n        input_function=\"colInput\", function_owner=self, tooltip=\"Columns\",\n        alignment=3, position={0.2,0.1,-0.415}, height=250, width=630,\n        font_size=226, validation=2, tab=2, value=layoutData.col\n    })\n    function rowInput(w,x,y,z) input_change(w,x,y,z,\"row\") end\n    self.createInput({\n        input_function=\"rowInput\", function_owner=self, tooltip=\"Rows\",\n        alignment=3, position={0.2,0.1,0.195}, height=250, width=630,\n        font_size=226, validation=2, tab=2, value=layoutData.row\n    })\nend\n\nfunction createClickButtons()\n    self.createButton({\n        click_function=\"click_submit\", function_owner=self,\n        position={0.45,0.1,0.695}, height=190, width=440, color={1,1,1,0}\n    })\n    self.createButton({\n        click_function=\"click_preview\", function_owner=self,\n        position={-0.45,0.1,0.695}, height=190, width=440, color={1,1,1,0}\n    })\nend\n",
          "LuaScriptState": "{\"col\":5,\"row\":6}",
          "XmlUI": ""
        },
        {
          "GUID": "9b8cbf",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -15.2007914,
            "posY": 1.21113491,
            "posZ": 6.797617,
            "rotX": 1.56751491E-06,
            "rotY": 180.018158,
            "rotZ": 1.06746575E-06,
            "scaleX": 0.6227387,
            "scaleY": 1.0,
            "scaleZ": 0.6227387
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "http://cloud-3.steamusercontent.com/ugc/780744341333266724/456817D618057954B8F84D44160BA46ABDE820BF/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1499997,
              "MergeDistancePixels": 9.222222,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "-- Universal Counter Tokens      coded by: MrStump\r\n\r\n--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save\r\nfunction onSave()\r\n    local data_to_save = {saved_count = count}\r\n    saved_data = JSON.encode(data_to_save)\r\n    return saved_data\r\nend\r\n\r\n--Loads the saved data then creates the buttons\r\nfunction onload(saved_data)\r\n    generateButtonParamiters()\r\n    --Checks if there is a saved data. If there is, it gets the saved value for 'count'\r\n    if saved_data != '' then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        count = loaded_data.saved_count\r\n    else\r\n        --If there wasn't saved data, the default value is set to 10.\r\n        count = 10\r\n    end\r\n\r\n    --Generates the buttons after putting the count value onto the 'display' button\r\n    b_display.label = tostring(count)\r\n    if count >= 100 then\r\n        b_display.font_size = 50\r\n    else\r\n        b_display.font_size = 800\r\n    end\r\n    self.createButton(b_display)\r\n    self.createButton(b_plus)\r\n    self.createButton(b_minus)\r\r\r\nend\r\n\r\n--Activates when + is hit. Adds 1 to 'count' then updates the display button.\r\nfunction increase()\r\n    count = count + 1\r\n    updateDisplay()\r\nend\r\n\r\n--Activates when - is hit. Subtracts 1 from 'count' then updates the display button.\r\nfunction decrease()\r\n    --Prevents count from going below 0\r\n    if count > 0 then\r\n        count = count - 1\r\n        updateDisplay()\r\n    end\r\nend\r\n\r\n--Activates when + is hit. Adds 5 to 'count' then updates the display button.\r\nfunction increase5()\r\n    count = count + 5\r\n    updateDisplay()\r\nend\r\n\r\n--Activates when - is hit. Subtracts 5 from 'count' then updates the display button.\r\nfunction decrease5()\r\n    --Prevents count from going below 0\r\n    if count > 4 then\r\n        count = count - 5\r\n    else\r\n        count = 0\r\n    end\r\n    updateDisplay()\r\nend\r\n\r\nfunction customSet()\r\n    local description = self.getDescription()\r\n    if description != '' and type(tonumber(description)) == 'number' then\r\n        self.setDescription('')\r\n        count = tonumber(description)\r\n        updateDisplay()\r\n    end\r\nend\r\n\r\n--function that updates the display. I trigger it whenever I change 'count'\r\nfunction updateDisplay()\r\n    --If statement to resize font size if it gets too long\r\n    if count >= 100 then\r\n        b_display.font_size = 1000\r\n    else\r\n        b_display.font_size = 2000\r\n    end\r\n    b_display.label = tostring(count)\r\n    self.editButton(b_display)\r\nend\r\n\r\n--This is activated when onload runs. This sets all paramiters for our buttons.\r\n--I do not have to put this all into a function, but I prefer to do it this way.\r\nfunction generateButtonParamiters()\r\n    b_display = {\r\n        index = 0, click_function = 'customSet', function_owner = self, label = '',\r\n        position = {0,0.1,0}, width = 800, height = 1000, font_size = 800\r\n    }\r\n    b_plus = {\r\n        click_function = 'increase', function_owner = self, label =  '+',\r\n        position = {1.5,0.1,0}, width = 350, height = 400, font_size = 500\r\n    }\r\n    b_minus = {\r\n        click_function = 'decrease', function_owner = self, label =  '-',\r\n        position = {-1.5,0.1,0}, width = 350, height = 400, font_size = 500\r\n    }\r\n    b_plus5 = {\r\n        click_function = 'increase5', function_owner = self, label =  '+5',\r\n        position = {0.75,0.1,-0.29}, width = 150, height = 230, font_size = 200\r\n    }\r\n    b_minus5 = {\r\n        click_function = 'decrease5', function_owner = self, label =  '-5',\r\n        position = {-0.75,0.1,-0.29}, width = 150, height = 230, font_size = 200\r\n    }\r\nend",
          "LuaScriptState": "{\"saved_count\":8}",
          "XmlUI": ""
        },
        {
          "GUID": "7acc2b",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -46.22934,
            "posY": 1.83644462,
            "posZ": 12.5621786,
            "rotX": -1.45983086E-05,
            "rotY": 179.999985,
            "rotZ": 5.726312E-06,
            "scaleX": 0.6000681,
            "scaleY": 1.0,
            "scaleZ": 0.6000681
          },
          "Nickname": "",
          "Description": "Left Click to add\nRight click to substract",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.590592265,
            "g": 0.134786636,
            "b": 0.134786636
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1695030430040473481/CAF85401AEFA6EDDDD875A4F42D13902CE46DC1E/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 15.0000572,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "MIN_VALUE = 1\nMAX_VALUE = 60\n\nf_size = 260\n\nfunction updateSave()\r\n    local data_to_save = {value}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction onload(saved_data)\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        value = loaded_data[1]\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        value = MIN_VALUE\r\n    end\r\n\r\n    createBtns()\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createBtns()\r\n\n\tlocal pos = {0,0.05,0.05}\r\n\tlocal rot = {0,0,0}\r\n\tlocal h = 400\r\n\tlocal w = 400\n\tlocal f_color = {1,1,1,255}\r\r\n\tlocal bg_color = {0,0,0,0}\r\n\tlocal diff = 0.8\n\t\r\n\t--center display\r\n\tself.createButton({\r\n  label=tostring(value),\n  click_function=\"add_subtract\",\n  function_owner=self,\n  position=pos,\n  rotation=rot,\n  height=h,\n  width=w,\n  scale={x=3, y=3, z=3},\n  font_size=get_size(value),\n  color=f_size,\n  font_color=f_color,\n  color=bg_color\r\n})\r\t\r\nend\r\n\nfunction get_size(value)\n  local char_count = string.len(tostring(value))\n  return f_size * 2 / (char_count + 1)\nend\r\n\nfunction add_subtract(_obj, _color, alt_click)\n  mod = alt_click and -1 or 1\n  new_value = math.min(math.max(value + mod, MIN_VALUE), MAX_VALUE)\n  if value ~= new_value then\n    value = new_value\n    updateDisplay()\n    updateSave()\n  end\nend\n\r\nfunction updateDisplay()\r\n  \tself.editButton({\n    index = 0,\n    label = tostring(value),\n    font_size = get_size(value)\n  })\r\nend",
          "LuaScriptState": "[1]",
          "XmlUI": ""
        },
        {
          "GUID": "04f316",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -23.1866646,
            "posY": 1.21113491,
            "posZ": 11.058012,
            "rotX": -4.26873925E-07,
            "rotY": 180.005035,
            "rotZ": -2.77374738E-07,
            "scaleX": 0.638267934,
            "scaleY": 1.0,
            "scaleZ": 0.638267934
          },
          "Nickname": "nom",
          "Description": "Left click - Increase\nRight click - Decrease",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.256097436,
            "g": 0.256097436,
            "b": 0.256097436
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "http://cloud-3.steamusercontent.com/ugc/958597478463059274/DE73B64E1B5C6F272EA3BEE5EF458E73E48FF03D/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 5.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = false\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0.5, 0.5, 0.5, 95}\r\n\r\n    if light_mode then\r\n        f_color = {1,1,1,95}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n    if self.getName() == \"\" then\r\n        ttText = val\r\n    else\r\n        ttText = val .. \"\\n\" .. self.getName()\r\n    end\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      tooltip=ttText,\r\n      function_owner=self,\r\n      position={0,0.05,-0.2},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={0,0,0,0}\r\n      })\r\n\r\n    self.createInput({\r\n        value = self.getName(), \r\n        input_function = \"editName\", \r\n        tooltip=ttText,\r\n        label = \"Counter\",\r\n        function_owner = self, \r\n        alignment = 3,\r\n        position = {0,0.05,1.7}, \r\n        width = 1200, \r\n        height = 1000, \r\n        font_size = 400, \r\n        scale={x=1, y=1, z=1},\r\n        font_color= f_color,\r\n        color = {0,0,0,0}\r\n        })\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n    self.createButton({\r\n        label=lightButtonText,\r\n        tooltip=lightButtonText,\r\n        click_function=\"swap_fcolor\",\r\n        function_owner=self,\r\n        position={0,-0.05,0.6},\r\n        rotation={180,180,0},\r\n        height=250,\r\n        width=1200,\r\n        scale={x=1, y=1, z=1},\r\n        font_size=250,\r\n        font_color=s_color,\r\n        color={0,0,0,0}\r\n        })\r\n\r\n    self.createButton({\r\n        label=\"[ Reset ]\",\r\n        tooltip=\"[ Reset ]\",\r\n        click_function=\"reset_val\",\r\n        function_owner=self,\r\n        position={0,-0.05,1.2},\r\n        rotation={180,180,0},\r\n        height=250,\r\n        width=1200,\r\n        scale={x=1, y=1, z=1},\r\n        font_size=250,\r\n        font_color=s_color,\r\n        color={0,0,0,0}\r\n        })\r\n\r\n    self.createInput({\r\n        value = \"#\",\r\n        label = \"...\",\r\n        input_function = \"keepSample\", \r\n        function_owner = self, \r\n        alignment = 3,\r\n        position={0,-0.05,-0.5},\r\n        rotation={180,180,0},\r\n        width = 600, \r\n        height = 800, \r\n        font_size = 1200, \r\n        scale={x=1, y=1, z=1},\r\n        font_color=f_color,\r\n        color = {0,0,0,0}\r\n        })\r\n\r\n    setTooltips()\r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n    setTooltips()\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n        reloadAll()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    reloadAll()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
          "LuaScriptState": "[true,0]",
          "XmlUI": ""
        },
        {
          "GUID": "30b55f",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -15.57232,
            "posY": 1.21113491,
            "posZ": 12.8211384,
            "rotX": -7.89718251E-06,
            "rotY": 179.9847,
            "rotZ": 1.7352836E-06,
            "scaleX": 0.9849631,
            "scaleY": 1.0,
            "scaleZ": 0.9849631
          },
          "Nickname": "Compteur",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1695030430040470662/82BB509432F483B3EA00A470890D0F04CA17B170/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.2,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "-- Universal Counter Tokens      coded by: MrStump\r\n\r\n--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save\r\nfunction onSave()\r\n    local data_to_save = {saved_count = count}\r\n    saved_data = JSON.encode(data_to_save)\r\n    return saved_data\r\nend\r\n\r\n--Loads the saved data then creates the buttons\r\nfunction onload(saved_data)\r\n    generateButtonParamiters()\r\n    --Checks if there is a saved data. If there is, it gets the saved value for 'count'\r\n    if saved_data != '' then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        count = loaded_data.saved_count\r\n    else\r\n        --If there wasn't saved data, the default value is set to 10.\r\n        count = 10\r\n    end\r\n\r\n    --Generates the buttons after putting the count value onto the 'display' button\r\n    b_display.label = tostring(count)\r\n    if count >= 100 then\r\n        b_display.font_size = 360\r\n    else\r\n        b_display.font_size = 500\r\n    end\r\n    self.createButton(b_display)\r\n    self.createButton(b_plus)\r\n    self.createButton(b_minus)\r\n    self.createButton(b_plus5)\r\n    self.createButton(b_minus5)\r\nend\r\n\r\n--Activates when + is hit. Adds 1 to 'count' then updates the display button.\r\nfunction increase()\r\n    count = count + 1\r\n    updateDisplay()\r\nend\r\n\r\n--Activates when - is hit. Subtracts 1 from 'count' then updates the display button.\r\nfunction decrease()\r\n    --Prevents count from going below 0\r\n    if count > 0 then\r\n        count = count - 1\r\n        updateDisplay()\r\n    end\r\nend\r\n\r\n--Activates when + is hit. Adds 5 to 'count' then updates the display button.\r\nfunction increase5()\r\n    count = count + 5\r\n    updateDisplay()\r\nend\r\n\r\n--Activates when - is hit. Subtracts 5 from 'count' then updates the display button.\r\nfunction decrease5()\r\n    --Prevents count from going below 0\r\n    if count > 4 then\r\n        count = count - 5\r\n    else\r\n        count = 0\r\n    end\r\n    updateDisplay()\r\nend\r\n\r\nfunction customSet()\r\n    local description = self.getDescription()\r\n    if description != '' and type(tonumber(description)) == 'number' then\r\n        self.setDescription('')\r\n        count = tonumber(description)\r\n        updateDisplay()\r\n    end\r\nend\r\n\r\n--function that updates the display. I trigger it whenever I change 'count'\r\nfunction updateDisplay()\r\n    --If statement to resize font size if it gets too long\r\n    if count >= 100 then\r\n        b_display.font_size = 360\r\n    else\r\n        b_display.font_size = 500\r\n    end\r\n    b_display.label = tostring(count)\r\n    self.editButton(b_display)\r\nend\r\n\r\n--This is activated when onload runs. This sets all paramiters for our buttons.\r\n--I do not have to put this all into a function, but I prefer to do it this way.\r\nfunction generateButtonParamiters()\r\n    b_display = {\r\n        index = 0, click_function = 'customSet', function_owner = self, label = '',\r\n        position = {0,0.1,0}, width = 800, height = 600, font_size = 500\r\n    }\r\n    b_plus = {\r\n        click_function = 'increase', function_owner = self, label =  '+1',\r\n        position = {1.45,-0.1,0.6}, width = 600, height = 500, font_size = 500\r\n    }\r\n    b_minus = {\r\n        click_function = 'decrease', function_owner = self, label =  '-1',\r\n        position = {-1.45,-0.1,0.6}, width = 600, height = 500, font_size = 500\r\n    }\r\n    b_plus5 = {\r\n        click_function = 'increase5', function_owner = self, label =  '+5',\r\n        position = {1.45,-0.1,-0.6}, width = 600, height = 500, font_size = 500\r\n    }\r\n    b_minus5 = {\r\n        click_function = 'decrease5', function_owner = self, label =  '-5',\r\n        position = {-1.45,-0.1,-0.6}, width = 600, height = 500, font_size = 500\r\n    }\r\nend\r\n\r\n\r\nfunction whitemegacreditscount()\r\n  obj = getObjectFromGUID(\"42c81e\")\r\n  prod = obj.getVar(\"count\")\r\n  tr = Global.getVar(\"white_tr\")\r\n  count = count + prod + tr\r\n  updateDisplay()\r\nend",
          "LuaScriptState": "{\"saved_count\":0}",
          "XmlUI": ""
        },
        {
          "GUID": "ed5a8e",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -44.5,
            "posY": 3.170479,
            "posZ": 7.5,
            "rotX": -8.60449063E-07,
            "rotY": 179.9999,
            "rotZ": -5.25212045E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1008186329321348870/043A7A535906CA22D6BB7744E66E1E4554F6516E/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.2,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "function onload()\r\n    local button_parameters = {}\r\n    button_parameters.click_function = \"onClick_RotateHands\"\r\n    button_parameters.function_owner = self\r\n    button_parameters.scale = {1, 1, 1}\r\n    button_parameters.position = {0, 0.5, 0}\r\n    button_parameters.width = 1000\r\n    button_parameters.height = 1000\r\n    button_parameters.font_size = 100\r\n    button_parameters.color = {0, 0, 0, 0}\r\n    self.createButton(button_parameters)\r\nend\r\n\r\nfunction onClick_RotateHands()\r\n    local players = getRealSeatedPlayers()\r\n    local playersCounterClockwise = playersCounterClockwise(players)\r\n\r\n    for i, player in ipairs(playersCounterClockwise) do\r\n        local moveToIndex = 1\r\n        if i == #players then\r\n            moveToIndex = 1\r\n        else\r\n            moveToIndex = i + 1\r\n        end\r\n        local moveToPlayer = playersCounterClockwise[moveToIndex]\r\n        rotationOffsetY = moveToPlayer.getHandTransform().rotation.y - player.getHandTransform().rotation.y\r\n\r\n        if rotationOffsetY > 0 then\r\n            rotationOffsetY = rotationOffsetY - 360\r\n        end\r\n\r\n        for i,card in ipairs(player.getHandObjects()) do\r\n            card.setPosition(getPlayerHandPosition(moveToPlayer))\r\n            card.rotate({0, rotationOffsetY, 0})\r\n        end\r\n    end\r\nend\r\n\r\n-- getSeatedPlayers() doesn't return the actual Player objects.\r\n-- This function will instead return the 'real' Player objects.\r\nfunction getRealSeatedPlayers()\r\n    local playerColors = getSeatedPlayers()\r\n    local players = {}\r\n    local newI = 1\r\n    for i, playerColor in pairs(playerColors) do\r\n        if Player[playerColor].getPlayerHand() != nil\r\n        then\r\n            players[newI] = Player[playerColor]\r\n            newI = newI + 1\r\n        end\r\n    end\r\n    return players\r\nend\r\n\r\nfunction getPlayerHandPosition(player)\r\n    hand = player.getPlayerHand()\r\n    return {hand.pos_x, hand.pos_y, hand.pos_z}\r\nend\r\n\r\n-- Returns a Table with player angles (in radians) as the keys\r\nfunction playerAngles(players)\r\n    local angles = {}\r\n    for i, player in pairs(players) do\r\n        angles[getPlayerAngle(player)] = player\r\n    end\r\n    return angles\r\nend\r\n\r\nfunction playersCounterClockwise(players)\r\n    local newPlayers = {}\r\n    local newI = 1\r\n    for i, player in pairsByKeys(playerAngles(players)) do\r\n        newPlayers[newI] = player\r\n        newI = newI + 1\r\n    end\r\n    return newPlayers\r\nend\r\n\r\nfunction playersClockwise(players)\r\n    local newPlayers = {}\r\n    local newI = #players\r\n    for i, player in pairsByKeys(playerAngles(players)) do\r\n        newPlayers[newI] = player\r\n        newI = newI - 1\r\n    end\r\n    return newPlayers\r\nend\r\n\r\nfunction getPlayerAngle(player)\r\n    local hand = player.getPlayerHand()\r\n    --print(\"DEBUG: Player color: \" .. player.color)\r\n    return math.atan2(hand.pos_z, hand.pos_x)\r\nend\r\n\r\n-- Copied from LUA docs... returns iterator in order of keys\r\nfunction pairsByKeys (t, f)\r\n    local a = {}\r\n    for n in pairs(t) do table.insert(a, n) end\r\n        table.sort(a, f)\r\n        local i = 0      -- iterator variable\r\n        local iter = function ()   -- iterator function\r\n        i = i + 1\r\n        if a[i] == nil then return nil\r\n            else return a[i], t[a[i]]\r\n        end\r\n    end\r\n    return iter\r\nend\r\n\r\nfunction reverseArray(tbl)\r\n  for i=1, math.floor(#tbl / 2) do\r\n    local tmp = tbl[i]\r\n    tbl[i] = tbl[#tbl - i + 1]\r\n    tbl[#tbl - i + 1] = tmp\r\n  end\r\nend\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "c2b639",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -50.5,
            "posY": 2.66100931,
            "posZ": 7.5,
            "rotX": -7.203706E-07,
            "rotY": 180.000031,
            "rotZ": -8.746977E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1008186329321255988/39C9139C9F2744242B60B93922571CC9C288AD48/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.2,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "function onload()\r\n    local button_parameters = {}\r\n    button_parameters.click_function = \"onClick_RotateHands\"\r\n    button_parameters.function_owner = self\r\n    button_parameters.scale = {1, 1, 1}\r\n    button_parameters.position = {0, 0.5, 0}\r\n    button_parameters.width = 1000\r\n    button_parameters.height = 1000\r\n    button_parameters.font_size = 100\r\n    button_parameters.color = {0, 0, 0, 0}\r\n    self.createButton(button_parameters)\r\nend\r\n\r\nfunction onClick_RotateHands()\r\n    local players = getRealSeatedPlayers()\r\n    local playersClockwise = playersClockwise(players)\r\n\r\n    for i, player in ipairs(playersClockwise) do\r\n        local moveToIndex = 1\r\n        if i == #players then\r\n            moveToIndex = 1\r\n        else\r\n            moveToIndex = i + 1\r\n        end\r\n        local moveToPlayer = playersClockwise[moveToIndex]\n        rotationOffsetY = moveToPlayer.getHandTransform().rotation.y - player.getHandTransform().rotation.y\r\n\r\n        if rotationOffsetY < 0 then\r\n            rotationOffsetY = rotationOffsetY + 360\r\n        end\r\n\r\n        for i,card in ipairs(player.getHandObjects()) do\r\n            card.setPosition(getPlayerHandPosition(moveToPlayer))\n            card.rotate({0, rotationOffsetY, 0})\r\r\n        end\r\n    end\r\nend\r\n\r\n-- getSeatedPlayers() doesn't return the actual Player objects.\r\n-- This function will instead return the 'real' Player objects.\r\nfunction getRealSeatedPlayers()\r\n    local playerColors = getSeatedPlayers()\r\n    local players = {}\r\n    local newI = 1\r\n    for i, playerColor in pairs(playerColors) do\r\n        if Player[playerColor].getPlayerHand() != nil\r\n        then\r\n            players[newI] = Player[playerColor]\r\n            newI = newI + 1\r\n        end\r\n    end\r\n    return players\r\nend\r\n\r\nfunction getPlayerHandPosition(player)\r\n    hand = player.getPlayerHand()\r\n    return {hand.pos_x, hand.pos_y, hand.pos_z}\r\nend\r\n\r\n-- Returns a Table with player angles (in radians) as the keys\r\nfunction playerAngles(players)\r\n    local angles = {}\r\n    for i, player in pairs(players) do\r\n        angles[getPlayerAngle(player)] = player\r\n    end\r\n    return angles\r\nend\r\n\r\nfunction playersCounterClockwise(players)\r\n    local newPlayers = {}\r\n    local newI = 1\r\n    for i, player in pairsByKeys(playerAngles(players)) do\r\n        newPlayers[newI] = player\r\n        newI = newI + 1\r\n    end\r\n    return newPlayers\r\nend\r\n\r\nfunction playersClockwise(players)\r\n    local newPlayers = {}\r\n    local newI = #players\r\n    for i, player in pairsByKeys(playerAngles(players)) do\r\n        newPlayers[newI] = player\r\n        newI = newI - 1\r\n    end\r\n    return newPlayers\r\nend\r\n\r\nfunction getPlayerAngle(player)\r\n    local hand = player.getPlayerHand()\r\n    --print(\"DEBUG: Player color: \" .. player.color)\r\n    return math.atan2(hand.pos_z, hand.pos_x)\r\nend\r\n\r\n-- Copied from LUA docs... returns iterator in order of keys\r\nfunction pairsByKeys (t, f)\r\n    local a = {}\r\n    for n in pairs(t) do table.insert(a, n) end\r\n        table.sort(a, f)\r\n        local i = 0      -- iterator variable\r\n        local iter = function ()   -- iterator function\r\n        i = i + 1\r\n        if a[i] == nil then return nil\r\n            else return a[i], t[a[i]]\r\n        end\r\n    end\r\n    return iter\r\nend\r\n\r\nfunction reverseArray(tbl)\r\n  for i=1, math.floor(#tbl / 2) do\r\n    local tmp = tbl[i]\r\n    tbl[i] = tbl[#tbl - i + 1]\r\n    tbl[#tbl - i + 1] = tmp\r\n  end\r\nend",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "fd060a",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 41.69822,
            "posY": 1.28823924,
            "posZ": 25.8717384,
            "rotX": 5.459706E-07,
            "rotY": 179.999359,
            "rotZ": -6.870112E-06,
            "scaleX": 0.7750003,
            "scaleY": 0.7750003,
            "scaleZ": 0.7750003
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "http://cloud-3.steamusercontent.com/ugc/1633109006124390951/BFF258FC90A0E56581C5C302752CF67C4947A540/",
            "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/1633109006124385783/D9B12C514998C9AC91AC23F7AA26468A75F4F015/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 0.09803922,
                "g": 0.09803922,
                "b": 0.09803922
              },
              "SpecularIntensity": 3.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "local deleteList = {}\r\nlocal bSize = {x=self.getBounds().size.x, y=self.getBounds().size.y, z=self.getBounds().size.z}\r\nloop = true\r\nY = nil\r\n\r\nfunction setPrams(obj,key) -- Set Prams based on the the object dropped.\r\n    local setPrams = {}\r\n    local index = hasValue(moveList, obj.name)\r\n    if index then\r\n        Y = Y + 1\r\n        setPrams = {\r\n            guid = obj.guid,\r\n            position = containerList[index].position + Vector({0,5,0}),\r\n            rotation = containerList[index].rotation\r\n        }\r\n    end\r\n    return setPrams\r\nend\r\n\r\nfunction processList(objectsInBag)\r\n    Y = setY()\r\n    checkDelete(objectsInBag)\r\n    checkMove(objectsInBag)\r\n    checkDeck(objectsInBag) -- if you only need to move to a single deck location, comment this out and ste it in the move list!\r\nend\r\n\r\nfunction onload()\r\n    math.randomseed(os.time())\r\n    fillLists()\r\nend\r\n\r\nfunction fillLists()\r\n    moveList = {}\r\n    containerList = {}\r\n    for i, obj in ipairs(getAllObjects()) do\r\n        if (obj.type == 'Bag' or obj.type == 'Deck') and obj.getName() ~= \"\" then\r\n            table.insert(moveList, obj.getName())\r\n            table.insert(containerList,\r\n                {\r\n                    name = obj.getName(),\r\n                    position = obj.getPosition(),\r\n                    rotation = obj.getRotation()\r\n                }\r\n            )\r\n        end\r\n    end\r\nend\r\n\r\nfunction onCollisionEnter(obj)\r\n    if loop == true then processList(self.getObjects()) end\r\nend\r\n\r\nfunction setY()\r\n    local pos = self.getPosition()\r\n    local Y = pos.y + self.getBoundsNormalized().size.y + 3\r\n    return Y\r\nend\r\n\r\nfunction checkDeck(objectsInBag)\r\n    function checkDeck_CORE()\r\n        -- Find Any Decks\r\n        local deckList = {}\r\n        for _, foundDecks in ipairs(objectsInBag) do\r\n            if foundDecks.name == 'Deck' then\r\n                local prams = {position={0, -20, 0}, guid = foundDecks.guid}\r\n                table.insert(deckList, prams)\r\n            end\r\n        end\r\n\r\n        --Take decks and put contents in bag\r\n        local decks = {}\r\n        for i, prams in ipairs(deckList) do\r\n            local d = self.takeObject(prams)\r\n            table.insert(decks, d)\r\n            d.setLock(false)\r\n        end\r\n        coroutine.yield(0)\r\n        for _, d in ipairs(decks) do\r\n            for i=1, #d.getObjects()-1, 1 do\r\n                c = d.takeObject({position={0,-20,0}})\r\n                self.putObject(c)\r\n            end\r\n        end\r\n    return 1\r\n    end\r\n   startLuaCoroutine(self, 'checkDeck_CORE')\r\nend\r\n\r\n--Reverses a table\r\nfunction reverseTable(t)\r\n    local reversedTable = {}\r\n    local itemCount = #t\r\n    for k, v in ipairs(t) do\r\n        reversedTable[itemCount + 1 - k] = v\r\n    end\r\n    return reversedTable\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\nfunction checkMove(objectsInBag)\r\n    local mvLIST = {}\r\n    local loopFix = true\r\n    ---Test for MOVING and store the GUID of those objects (using a nameList)\r\n       for _, obj in ipairs(objectsInBag) do\r\n           --print(obj.guid)\r\n            for _, key in ipairs(moveList) do\r\n               if string.match(obj.name, key) then\r\n                   if loopFix == true then\r\n                      -- print('    : '..obj.name)\r\n                       local prams = setPrams(obj,key)\r\n                       table.insert(mvLIST, prams)\r\n                   end\r\n                  loopFix = false\r\n               end\r\n            end\r\n            loopFix = true\r\n        end\r\n\r\n    ---Loop though the ORIGINAL bag and take objects to move location (moveLIST)\r\n        local yy = nil\r\n        local setPos = false\r\n        for _, prams in ipairs(mvLIST) do\r\n            if yy == nil then yy = prams.position[2] end\r\n            local o = self.takeObject(prams)\r\n            o.setPositionSmooth({prams.position[1], yy, prams.position[3]}, false, false) -- + obj.getBoundsNormalized().size.y\r\n            yy = yy + o.getBoundsNormalized().size.y+1\r\n        end\r\nend\r\n\r\nfunction checkDelete(objectsInBag)\r\n    local deleteME = {}\r\n    ---Test for DELETION and store the GUID of those objects (using a nameList)\r\n    for _, obj in ipairs(objectsInBag) do\r\n       for _, key in ipairs(deleteList) do\r\n           if obj.name == key then\r\n               local prams = {}\r\n                     prams.guid = obj.guid\r\n                     prams.position = {0, -25, 0}\r\n               table.insert(deleteME, prams)\r\n           end\r\n       end\r\n    end\r\n    ---Loop though the bag and take out objects by GUID and then destroy them (delList)\r\n    for _, prams in ipairs(deleteME) do\r\n      local obj = self.takeObject(prams)\r\n      obj.destruct()\r\n    end\r\nend\r\n\r\nfunction hasValue (tab, val)\r\n    for index, value in ipairs(tab) do\r\n        if value == val then\r\n            return index\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "d558e8",
          "Name": "Custom_Model",
          "Transform": {
            "posX": -58.5,
            "posY": 2.95911074,
            "posZ": 28.5,
            "rotX": 1.01920489E-06,
            "rotY": 314.976685,
            "rotZ": -2.66906977E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.7961672,
            "g": 0.137317389,
            "b": 0.137317389
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "http://cloud-3.steamusercontent.com/ugc/1698407701664642327/27C18B3BBF70238D7385FA8F01FD6ADB0CEE05DC/",
            "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/1929248595932865630/268282EA5875199784805206E18463CDDFAF601D/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 0,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "a5c613",
          "Name": "Custom_Model",
          "Transform": {
            "posX": 62.0851173,
            "posY": 1.22122025,
            "posZ": 27.46953,
            "rotX": -6.70770851E-06,
            "rotY": 359.973175,
            "rotZ": -5.139779E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.7961672,
            "g": 0.137317151,
            "b": 0.137317151
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "http://cloud-3.steamusercontent.com/ugc/1698407701664807239/F1C8509DF8BC6C454207153920046237AFC56BDF/",
            "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/1698407701664672094/B74C6853FFBACF38572BC70F90F02E4EC4ABE1DB/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 0,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b3e48d",
          "Name": "Custom_Model",
          "Transform": {
            "posX": 52.58524,
            "posY": 1.22121882,
            "posZ": 29.9693451,
            "rotX": -3.87201E-07,
            "rotY": 0.0310487133,
            "rotZ": 3.99420827E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.7961672,
            "g": 0.137317151,
            "b": 0.137317151
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "http://cloud-3.steamusercontent.com/ugc/1698407701664810828/951F0329C6D03EE6DFC0AF06592A10C5111B5CA4/",
            "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/1698407701664672094/B74C6853FFBACF38572BC70F90F02E4EC4ABE1DB/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 0,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "f63753",
          "Name": "Custom_Model",
          "Transform": {
            "posX": -30.5909348,
            "posY": 1.21113491,
            "posZ": 20.0999031,
            "rotX": -8.261927E-07,
            "rotY": 29.9908924,
            "rotZ": -4.75352635E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.7961672,
            "g": 0.137317389,
            "b": 0.137317389
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "http://cloud-3.steamusercontent.com/ugc/1698407701664661828/5B2B37360864D690E294BF392274ED211E6A1228/",
            "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/1929248595932865630/268282EA5875199784805206E18463CDDFAF601D/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 0,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "ae31a0",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 6.980466,
        "posY": 3.29008365,
        "posZ": 4.820281,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 5.1,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5363af",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -25.6997566,
        "posY": 2.06083,
        "posZ": -24.02193,
        "rotX": 0.0100284936,
        "rotY": 359.793182,
        "rotZ": -0.0005790817,
        "scaleX": 10.0,
        "scaleY": 3.2,
        "scaleZ": 8.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "ab24e9",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": 8.5,
        "posY": 0.9430001,
        "posZ": 20.5,
        "rotX": -2.166858E-07,
        "rotY": 1.93191554E-05,
        "rotZ": -1.6548708E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "monnaie2",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "729062",
          "Name": "reversi_chip",
          "Transform": {
            "posX": 9.001474,
            "posY": 3.15702,
            "posZ": 21.0013924,
            "rotX": 1.01893759,
            "rotY": 359.9828,
            "rotZ": 178.9953,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "monnaie2",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.757352948,
            "g": 0.757352948,
            "b": 0.757352948
          },
          "Tags": [
            "monnaie"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "dbf42c",
      "Name": "Die_6_Rounded",
      "Transform": {
        "posX": -4.992371,
        "posY": 1.31000006,
        "posZ": 19.992775,
        "rotX": -5.75275465E-07,
        "rotY": 0.09908162,
        "rotZ": -8.837344E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.996078432,
        "g": 0.0,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "RotationValues": [
        {
          "Value": "1",
          "Rotation": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          }
        },
        {
          "Value": "2",
          "Rotation": {
            "x": 90.0,
            "y": 0.0,
            "z": 0.0
          }
        },
        {
          "Value": "3",
          "Rotation": {
            "x": 0.0,
            "y": 0.0,
            "z": 90.0
          }
        },
        {
          "Value": "4",
          "Rotation": {
            "x": 0.0,
            "y": 0.0,
            "z": -90.0
          }
        },
        {
          "Value": "5",
          "Rotation": {
            "x": -90.0,
            "y": 0.0,
            "z": 0.0
          }
        },
        {
          "Value": "6",
          "Rotation": {
            "x": 0.0,
            "y": 0.0,
            "z": -180.0
          }
        }
      ]
    }
  ]
}